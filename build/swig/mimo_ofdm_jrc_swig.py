# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mimo_ofdm_jrc_swig
else:
    import _mimo_ofdm_jrc_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _mimo_ofdm_jrc_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _mimo_ofdm_jrc_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _mimo_ofdm_jrc_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _mimo_ofdm_jrc_swig.high_res_timer_epoch()
class fft_peak_detect(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::fft_peak_detect.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::fft_peak_detect's constructor is in a private implementation class. mimo_ofdm_jrc::fft_peak_detect::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        interp_factor : 
        threshold : 
        samp_protect : 
        max_freq : 
        cut_max_freq : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(samp_rate: "int", interp_factor: "float", threshold: "float", samp_protect: "int", max_freq: "pmt_vector_float", cut_max_freq: "bool", len_key: "std::string const &") -> "gr::mimo_ofdm_jrc::fft_peak_detect::sptr":
        r"""
        make(int samp_rate, float interp_factor, float threshold, int samp_protect, pmt_vector_float max_freq, bool cut_max_freq, std::string const & len_key) -> fft_peak_detect_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::fft_peak_detect.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::fft_peak_detect's constructor is in a private implementation class. mimo_ofdm_jrc::fft_peak_detect::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            interp_factor : 
            threshold : 
            samp_protect : 
            max_freq : 
            cut_max_freq : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_make(samp_rate, interp_factor, threshold, samp_protect, max_freq, cut_max_freq, len_key)

    def set_threshold(self, threshold: "float") -> "void":
        r"""set_threshold(fft_peak_detect self, float threshold)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_set_threshold(self, threshold)

    def set_samp_protect(self, samp: "int") -> "void":
        r"""set_samp_protect(fft_peak_detect self, int samp)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_set_samp_protect(self, samp)

    def set_max_freq(self, freq: "pmt_vector_float") -> "void":
        r"""set_max_freq(fft_peak_detect self, pmt_vector_float freq)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_set_max_freq(self, freq)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_fft_peak_detect

# Register fft_peak_detect in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.fft_peak_detect_swigregister(fft_peak_detect)

def fft_peak_detect_make(samp_rate: "int", interp_factor: "float", threshold: "float", samp_protect: "int", max_freq: "pmt_vector_float", cut_max_freq: "bool", len_key: "std::string const &") -> "gr::mimo_ofdm_jrc::fft_peak_detect::sptr":
    r"""
    fft_peak_detect_make(int samp_rate, float interp_factor, float threshold, int samp_protect, pmt_vector_float max_freq, bool cut_max_freq, std::string const & len_key) -> fft_peak_detect_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::fft_peak_detect.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::fft_peak_detect's constructor is in a private implementation class. mimo_ofdm_jrc::fft_peak_detect::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        interp_factor : 
        threshold : 
        samp_protect : 
        max_freq : 
        cut_max_freq : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.fft_peak_detect_make(samp_rate, interp_factor, threshold, samp_protect, max_freq, cut_max_freq, len_key)

class fft_peak_detect_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::fft_peak_detect > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(fft_peak_detect_sptr self) -> fft_peak_detect_sptr
        __init__(fft_peak_detect_sptr self, fft_peak_detect p) -> fft_peak_detect_sptr
        """
        _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_fft_peak_detect_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::fft_peak_detect *":
        r"""__deref__(fft_peak_detect_sptr self) -> fft_peak_detect"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_fft_peak_detect_sptr

    def make(self, samp_rate: "int", interp_factor: "float", threshold: "float", samp_protect: "int", max_freq: "pmt_vector_float", cut_max_freq: "bool", len_key: "std::string const &") -> "gr::mimo_ofdm_jrc::fft_peak_detect::sptr":
        r"""
        make(fft_peak_detect_sptr self, int samp_rate, float interp_factor, float threshold, int samp_protect, pmt_vector_float max_freq, bool cut_max_freq, std::string const & len_key) -> fft_peak_detect_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::fft_peak_detect.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::fft_peak_detect's constructor is in a private implementation class. mimo_ofdm_jrc::fft_peak_detect::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            interp_factor : 
            threshold : 
            samp_protect : 
            max_freq : 
            cut_max_freq : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_make(self, samp_rate, interp_factor, threshold, samp_protect, max_freq, cut_max_freq, len_key)

    def set_threshold(self, threshold: "float") -> "void":
        r"""set_threshold(fft_peak_detect_sptr self, float threshold)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_threshold(self, threshold)

    def set_samp_protect(self, samp: "int") -> "void":
        r"""set_samp_protect(fft_peak_detect_sptr self, int samp)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_samp_protect(self, samp)

    def set_max_freq(self, freq: "pmt_vector_float") -> "void":
        r"""set_max_freq(fft_peak_detect_sptr self, pmt_vector_float freq)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_max_freq(self, freq)

    def history(self) -> "unsigned int":
        r"""history(fft_peak_detect_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(fft_peak_detect_sptr self, int which, int delay)
        declare_sample_delay(fft_peak_detect_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(fft_peak_detect_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(fft_peak_detect_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(fft_peak_detect_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(fft_peak_detect_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(fft_peak_detect_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(fft_peak_detect_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(fft_peak_detect_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(fft_peak_detect_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(fft_peak_detect_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(fft_peak_detect_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(fft_peak_detect_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(fft_peak_detect_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(fft_peak_detect_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(fft_peak_detect_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(fft_peak_detect_sptr self)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(fft_peak_detect_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(fft_peak_detect_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(fft_peak_detect_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(fft_peak_detect_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(fft_peak_detect_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_peak_detect_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(fft_peak_detect_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(fft_peak_detect_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_peak_detect_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(fft_peak_detect_sptr self, int which) -> float
        pc_input_buffers_full(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(fft_peak_detect_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(fft_peak_detect_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(fft_peak_detect_sptr self, int which) -> float
        pc_output_buffers_full(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(fft_peak_detect_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(fft_peak_detect_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_peak_detect_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(fft_peak_detect_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(fft_peak_detect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(fft_peak_detect_sptr self)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(fft_peak_detect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(fft_peak_detect_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(fft_peak_detect_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(fft_peak_detect_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(fft_peak_detect_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(fft_peak_detect_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(fft_peak_detect_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(fft_peak_detect_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(fft_peak_detect_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(fft_peak_detect_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(fft_peak_detect_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(fft_peak_detect_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(fft_peak_detect_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(fft_peak_detect_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(fft_peak_detect_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(fft_peak_detect_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(fft_peak_detect_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.fft_peak_detect_sptr_message_subscribers(self, which_port)

# Register fft_peak_detect_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.fft_peak_detect_sptr_swigregister(fft_peak_detect_sptr)


fft_peak_detect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_peak_detect = fft_peak_detect.make;

class frame_detector(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_detector.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_detector's constructor is in a private implementation class. mimo_ofdm_jrc::frame_detector::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        threshold : 
        min_n_peaks : 
        ignore_gap : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(fft_len: "int", cp_len: "int", threshold: "double", min_n_peaks: "unsigned int", ignore_gap: "unsigned int", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_detector::sptr":
        r"""
        make(int fft_len, int cp_len, double threshold, unsigned int min_n_peaks, unsigned int ignore_gap, bool debug) -> frame_detector_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_detector.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_detector's constructor is in a private implementation class. mimo_ofdm_jrc::frame_detector::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            threshold : 
            min_n_peaks : 
            ignore_gap : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.frame_detector_make(fft_len, cp_len, threshold, min_n_peaks, ignore_gap, debug)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_frame_detector

# Register frame_detector in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.frame_detector_swigregister(frame_detector)

def frame_detector_make(fft_len: "int", cp_len: "int", threshold: "double", min_n_peaks: "unsigned int", ignore_gap: "unsigned int", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_detector::sptr":
    r"""
    frame_detector_make(int fft_len, int cp_len, double threshold, unsigned int min_n_peaks, unsigned int ignore_gap, bool debug) -> frame_detector_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_detector.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_detector's constructor is in a private implementation class. mimo_ofdm_jrc::frame_detector::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        threshold : 
        min_n_peaks : 
        ignore_gap : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.frame_detector_make(fft_len, cp_len, threshold, min_n_peaks, ignore_gap, debug)

class frame_detector_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::frame_detector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frame_detector_sptr self) -> frame_detector_sptr
        __init__(frame_detector_sptr self, frame_detector p) -> frame_detector_sptr
        """
        _mimo_ofdm_jrc_swig.frame_detector_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_frame_detector_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::frame_detector *":
        r"""__deref__(frame_detector_sptr self) -> frame_detector"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_frame_detector_sptr

    def make(self, fft_len: "int", cp_len: "int", threshold: "double", min_n_peaks: "unsigned int", ignore_gap: "unsigned int", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_detector::sptr":
        r"""
        make(frame_detector_sptr self, int fft_len, int cp_len, double threshold, unsigned int min_n_peaks, unsigned int ignore_gap, bool debug) -> frame_detector_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_detector.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_detector's constructor is in a private implementation class. mimo_ofdm_jrc::frame_detector::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            threshold : 
            min_n_peaks : 
            ignore_gap : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_make(self, fft_len, cp_len, threshold, min_n_peaks, ignore_gap, debug)

    def history(self) -> "unsigned int":
        r"""history(frame_detector_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frame_detector_sptr self, int which, int delay)
        declare_sample_delay(frame_detector_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frame_detector_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frame_detector_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frame_detector_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frame_detector_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frame_detector_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frame_detector_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frame_detector_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frame_detector_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frame_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frame_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frame_detector_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frame_detector_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frame_detector_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frame_detector_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frame_detector_sptr self)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frame_detector_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frame_detector_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frame_detector_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frame_detector_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frame_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_detector_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frame_detector_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frame_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_detector_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frame_detector_sptr self, int which) -> float
        pc_input_buffers_full(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frame_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frame_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frame_detector_sptr self, int which) -> float
        pc_output_buffers_full(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frame_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frame_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_detector_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frame_detector_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frame_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frame_detector_sptr self)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frame_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frame_detector_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frame_detector_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frame_detector_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frame_detector_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frame_detector_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frame_detector_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frame_detector_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frame_detector_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frame_detector_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frame_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frame_detector_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frame_detector_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frame_detector_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frame_detector_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frame_detector_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frame_detector_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_detector_sptr_message_subscribers(self, which_port)

# Register frame_detector_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.frame_detector_sptr_swigregister(frame_detector_sptr)


frame_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_detector = frame_detector.make;

class frame_sync(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_sync.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_sync's constructor is in a private implementation class. mimo_ofdm_jrc::frame_sync::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        sync_length : 
        ltf_seq_time : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(fft_len: "int", cp_len: "int", sync_length: "unsigned int", ltf_seq_time: "pmt_vector_cfloat", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_sync::sptr":
        r"""
        make(int fft_len, int cp_len, unsigned int sync_length, pmt_vector_cfloat ltf_seq_time, bool debug) -> frame_sync_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_sync.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_sync's constructor is in a private implementation class. mimo_ofdm_jrc::frame_sync::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            sync_length : 
            ltf_seq_time : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.frame_sync_make(fft_len, cp_len, sync_length, ltf_seq_time, debug)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_frame_sync

# Register frame_sync in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.frame_sync_swigregister(frame_sync)

def frame_sync_make(fft_len: "int", cp_len: "int", sync_length: "unsigned int", ltf_seq_time: "pmt_vector_cfloat", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_sync::sptr":
    r"""
    frame_sync_make(int fft_len, int cp_len, unsigned int sync_length, pmt_vector_cfloat ltf_seq_time, bool debug) -> frame_sync_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_sync.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_sync's constructor is in a private implementation class. mimo_ofdm_jrc::frame_sync::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        sync_length : 
        ltf_seq_time : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.frame_sync_make(fft_len, cp_len, sync_length, ltf_seq_time, debug)

class frame_sync_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::frame_sync > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frame_sync_sptr self) -> frame_sync_sptr
        __init__(frame_sync_sptr self, frame_sync p) -> frame_sync_sptr
        """
        _mimo_ofdm_jrc_swig.frame_sync_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_frame_sync_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::frame_sync *":
        r"""__deref__(frame_sync_sptr self) -> frame_sync"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_frame_sync_sptr

    def make(self, fft_len: "int", cp_len: "int", sync_length: "unsigned int", ltf_seq_time: "pmt_vector_cfloat", debug: "bool") -> "gr::mimo_ofdm_jrc::frame_sync::sptr":
        r"""
        make(frame_sync_sptr self, int fft_len, int cp_len, unsigned int sync_length, pmt_vector_cfloat ltf_seq_time, bool debug) -> frame_sync_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::frame_sync.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::frame_sync's constructor is in a private implementation class. mimo_ofdm_jrc::frame_sync::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            sync_length : 
            ltf_seq_time : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_make(self, fft_len, cp_len, sync_length, ltf_seq_time, debug)

    def history(self) -> "unsigned int":
        r"""history(frame_sync_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frame_sync_sptr self, int which, int delay)
        declare_sample_delay(frame_sync_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frame_sync_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frame_sync_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frame_sync_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frame_sync_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frame_sync_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frame_sync_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frame_sync_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frame_sync_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frame_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frame_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frame_sync_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frame_sync_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frame_sync_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frame_sync_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frame_sync_sptr self)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frame_sync_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frame_sync_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frame_sync_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frame_sync_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frame_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_sync_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frame_sync_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frame_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_sync_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_sync_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frame_sync_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frame_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frame_sync_sptr self)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frame_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frame_sync_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frame_sync_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frame_sync_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frame_sync_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frame_sync_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frame_sync_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frame_sync_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frame_sync_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frame_sync_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frame_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frame_sync_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frame_sync_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frame_sync_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frame_sync_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frame_sync_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frame_sync_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.frame_sync_sptr_message_subscribers(self, which_port)

# Register frame_sync_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.frame_sync_sptr_swigregister(frame_sync_sptr)


frame_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_sync = frame_sync.make;

class gui_heatmap_plot(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_heatmap_plot.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_heatmap_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_heatmap_plot::make is the public interface for creating new instances.

    Args:
        vlen : 
        digital_control : 
        sivers_angle_log : 
        interval : 
        xlabel : 
        ylabel : 
        label : 
        axis_x : 
        axis_y : 
        dynamic_range_db : 
        x_axis_ticks : 
        y_axis_ticks : 
        autoscale_z : 
        db_scale : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_heatmap_plot::sptr":
        r"""
        make(int vlen, bool digital_control, std::string const & sivers_angle_log, int interval, std::string xlabel, std::string ylabel, std::string label, pmt_vector_float axis_x, pmt_vector_float axis_y, float dynamic_range_db, pmt_vector_float x_axis_ticks, pmt_vector_float y_axis_ticks, bool autoscale_z, bool db_scale, std::string len_key="packet_len") -> gui_heatmap_plot_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_heatmap_plot.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_heatmap_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_heatmap_plot::make is the public interface for creating new instances.

        Args:
            vlen : 
            digital_control : 
            sivers_angle_log : 
            interval : 
            xlabel : 
            ylabel : 
            label : 
            axis_x : 
            axis_y : 
            dynamic_range_db : 
            x_axis_ticks : 
            y_axis_ticks : 
            autoscale_z : 
            db_scale : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_make(*args, **kwargs)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_gui_heatmap_plot

# Register gui_heatmap_plot in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.gui_heatmap_plot_swigregister(gui_heatmap_plot)

def gui_heatmap_plot_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_heatmap_plot::sptr":
    r"""
    gui_heatmap_plot_make(int vlen, bool digital_control, std::string const & sivers_angle_log, int interval, std::string xlabel, std::string ylabel, std::string label, pmt_vector_float axis_x, pmt_vector_float axis_y, float dynamic_range_db, pmt_vector_float x_axis_ticks, pmt_vector_float y_axis_ticks, bool autoscale_z, bool db_scale, std::string len_key="packet_len") -> gui_heatmap_plot_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_heatmap_plot.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_heatmap_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_heatmap_plot::make is the public interface for creating new instances.

    Args:
        vlen : 
        digital_control : 
        sivers_angle_log : 
        interval : 
        xlabel : 
        ylabel : 
        label : 
        axis_x : 
        axis_y : 
        dynamic_range_db : 
        x_axis_ticks : 
        y_axis_ticks : 
        autoscale_z : 
        db_scale : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.gui_heatmap_plot_make(*args, **kwargs)

class gui_heatmap_plot_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::gui_heatmap_plot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gui_heatmap_plot_sptr self) -> gui_heatmap_plot_sptr
        __init__(gui_heatmap_plot_sptr self, gui_heatmap_plot p) -> gui_heatmap_plot_sptr
        """
        _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_gui_heatmap_plot_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::gui_heatmap_plot *":
        r"""__deref__(gui_heatmap_plot_sptr self) -> gui_heatmap_plot"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_gui_heatmap_plot_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_heatmap_plot::sptr":
        r"""
        make(gui_heatmap_plot_sptr self, int vlen, bool digital_control, std::string const & sivers_angle_log, int interval, std::string xlabel, std::string ylabel, std::string label, pmt_vector_float axis_x, pmt_vector_float axis_y, float dynamic_range_db, pmt_vector_float x_axis_ticks, pmt_vector_float y_axis_ticks, bool autoscale_z, bool db_scale, std::string len_key="packet_len") -> gui_heatmap_plot_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_heatmap_plot.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_heatmap_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_heatmap_plot::make is the public interface for creating new instances.

        Args:
            vlen : 
            digital_control : 
            sivers_angle_log : 
            interval : 
            xlabel : 
            ylabel : 
            label : 
            axis_x : 
            axis_y : 
            dynamic_range_db : 
            x_axis_ticks : 
            y_axis_ticks : 
            autoscale_z : 
            db_scale : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(gui_heatmap_plot_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(gui_heatmap_plot_sptr self, int which, int delay)
        declare_sample_delay(gui_heatmap_plot_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(gui_heatmap_plot_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(gui_heatmap_plot_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(gui_heatmap_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(gui_heatmap_plot_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(gui_heatmap_plot_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(gui_heatmap_plot_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(gui_heatmap_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(gui_heatmap_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(gui_heatmap_plot_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(gui_heatmap_plot_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(gui_heatmap_plot_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(gui_heatmap_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(gui_heatmap_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(gui_heatmap_plot_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(gui_heatmap_plot_sptr self)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(gui_heatmap_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(gui_heatmap_plot_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(gui_heatmap_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(gui_heatmap_plot_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(gui_heatmap_plot_sptr self, long max_output_buffer)
        set_max_output_buffer(gui_heatmap_plot_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(gui_heatmap_plot_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(gui_heatmap_plot_sptr self, long min_output_buffer)
        set_min_output_buffer(gui_heatmap_plot_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(gui_heatmap_plot_sptr self, int which) -> float
        pc_input_buffers_full(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(gui_heatmap_plot_sptr self, int which) -> float
        pc_input_buffers_full_avg(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(gui_heatmap_plot_sptr self, int which) -> float
        pc_input_buffers_full_var(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(gui_heatmap_plot_sptr self, int which) -> float
        pc_output_buffers_full(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(gui_heatmap_plot_sptr self, int which) -> float
        pc_output_buffers_full_avg(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(gui_heatmap_plot_sptr self, int which) -> float
        pc_output_buffers_full_var(gui_heatmap_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(gui_heatmap_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(gui_heatmap_plot_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(gui_heatmap_plot_sptr self)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(gui_heatmap_plot_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(gui_heatmap_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(gui_heatmap_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(gui_heatmap_plot_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(gui_heatmap_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(gui_heatmap_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(gui_heatmap_plot_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(gui_heatmap_plot_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(gui_heatmap_plot_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(gui_heatmap_plot_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(gui_heatmap_plot_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(gui_heatmap_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(gui_heatmap_plot_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(gui_heatmap_plot_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(gui_heatmap_plot_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(gui_heatmap_plot_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(gui_heatmap_plot_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_message_subscribers(self, which_port)

# Register gui_heatmap_plot_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.gui_heatmap_plot_sptr_swigregister(gui_heatmap_plot_sptr)


gui_heatmap_plot_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gui_heatmap_plot = gui_heatmap_plot.make;

class gui_time_plot(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_time_plot.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_time_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_time_plot::make is the public interface for creating new instances.

    Args:
        interval : 
        y_tag : 
        y_label : 
        y_axis_limits : 
        time_window : 
        title_label : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_time_plot::sptr":
        r"""
        make(int interval, std::string y_tag, std::string y_label, pmt_vector_float y_axis_limits, float time_window, std::string title_label="") -> gui_time_plot_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_time_plot.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_time_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_time_plot::make is the public interface for creating new instances.

        Args:
            interval : 
            y_tag : 
            y_label : 
            y_axis_limits : 
            time_window : 
            title_label : 
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_make(*args, **kwargs)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_gui_time_plot

# Register gui_time_plot in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.gui_time_plot_swigregister(gui_time_plot)

def gui_time_plot_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_time_plot::sptr":
    r"""
    gui_time_plot_make(int interval, std::string y_tag, std::string y_label, pmt_vector_float y_axis_limits, float time_window, std::string title_label="") -> gui_time_plot_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_time_plot.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_time_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_time_plot::make is the public interface for creating new instances.

    Args:
        interval : 
        y_tag : 
        y_label : 
        y_axis_limits : 
        time_window : 
        title_label : 
    """
    return _mimo_ofdm_jrc_swig.gui_time_plot_make(*args, **kwargs)

class gui_time_plot_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::gui_time_plot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gui_time_plot_sptr self) -> gui_time_plot_sptr
        __init__(gui_time_plot_sptr self, gui_time_plot p) -> gui_time_plot_sptr
        """
        _mimo_ofdm_jrc_swig.gui_time_plot_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_gui_time_plot_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::gui_time_plot *":
        r"""__deref__(gui_time_plot_sptr self) -> gui_time_plot"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_gui_time_plot_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::gui_time_plot::sptr":
        r"""
        make(gui_time_plot_sptr self, int interval, std::string y_tag, std::string y_label, pmt_vector_float y_axis_limits, float time_window, std::string title_label="") -> gui_time_plot_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::gui_time_plot.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::gui_time_plot's constructor is in a private implementation class. mimo_ofdm_jrc::gui_time_plot::make is the public interface for creating new instances.

        Args:
            interval : 
            y_tag : 
            y_label : 
            y_axis_limits : 
            time_window : 
            title_label : 
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(gui_time_plot_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(gui_time_plot_sptr self, int which, int delay)
        declare_sample_delay(gui_time_plot_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(gui_time_plot_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(gui_time_plot_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(gui_time_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(gui_time_plot_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(gui_time_plot_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(gui_time_plot_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(gui_time_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(gui_time_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(gui_time_plot_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(gui_time_plot_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(gui_time_plot_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(gui_time_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(gui_time_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(gui_time_plot_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(gui_time_plot_sptr self)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(gui_time_plot_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(gui_time_plot_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(gui_time_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(gui_time_plot_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(gui_time_plot_sptr self, long max_output_buffer)
        set_max_output_buffer(gui_time_plot_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(gui_time_plot_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(gui_time_plot_sptr self, long min_output_buffer)
        set_min_output_buffer(gui_time_plot_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(gui_time_plot_sptr self, int which) -> float
        pc_input_buffers_full(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(gui_time_plot_sptr self, int which) -> float
        pc_input_buffers_full_avg(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(gui_time_plot_sptr self, int which) -> float
        pc_input_buffers_full_var(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(gui_time_plot_sptr self, int which) -> float
        pc_output_buffers_full(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(gui_time_plot_sptr self, int which) -> float
        pc_output_buffers_full_avg(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(gui_time_plot_sptr self, int which) -> float
        pc_output_buffers_full_var(gui_time_plot_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(gui_time_plot_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(gui_time_plot_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(gui_time_plot_sptr self)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(gui_time_plot_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(gui_time_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(gui_time_plot_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(gui_time_plot_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(gui_time_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(gui_time_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(gui_time_plot_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(gui_time_plot_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(gui_time_plot_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(gui_time_plot_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(gui_time_plot_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(gui_time_plot_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(gui_time_plot_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(gui_time_plot_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(gui_time_plot_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(gui_time_plot_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(gui_time_plot_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.gui_time_plot_sptr_message_subscribers(self, which_port)

# Register gui_time_plot_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.gui_time_plot_sptr_swigregister(gui_time_plot_sptr)


gui_time_plot_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gui_time_plot = gui_time_plot.make;

class matrix_transpose(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::matrix_transpose.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::matrix_transpose's constructor is in a private implementation class. mimo_ofdm_jrc::matrix_transpose::make is the public interface for creating new instances.

    Args:
        input_len : 
        output_len : 
        interp_factor : 
        debug : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::matrix_transpose::sptr":
        r"""
        make(int input_len, int output_len, int interp_factor, bool debug, std::string len_key="packet_len") -> matrix_transpose_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::matrix_transpose.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::matrix_transpose's constructor is in a private implementation class. mimo_ofdm_jrc::matrix_transpose::make is the public interface for creating new instances.

        Args:
            input_len : 
            output_len : 
            interp_factor : 
            debug : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_make(*args, **kwargs)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_matrix_transpose

# Register matrix_transpose in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.matrix_transpose_swigregister(matrix_transpose)

def matrix_transpose_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::matrix_transpose::sptr":
    r"""
    matrix_transpose_make(int input_len, int output_len, int interp_factor, bool debug, std::string len_key="packet_len") -> matrix_transpose_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::matrix_transpose.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::matrix_transpose's constructor is in a private implementation class. mimo_ofdm_jrc::matrix_transpose::make is the public interface for creating new instances.

    Args:
        input_len : 
        output_len : 
        interp_factor : 
        debug : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.matrix_transpose_make(*args, **kwargs)

class matrix_transpose_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::matrix_transpose > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(matrix_transpose_sptr self) -> matrix_transpose_sptr
        __init__(matrix_transpose_sptr self, matrix_transpose p) -> matrix_transpose_sptr
        """
        _mimo_ofdm_jrc_swig.matrix_transpose_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_matrix_transpose_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::matrix_transpose *":
        r"""__deref__(matrix_transpose_sptr self) -> matrix_transpose"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_matrix_transpose_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::matrix_transpose::sptr":
        r"""
        make(matrix_transpose_sptr self, int input_len, int output_len, int interp_factor, bool debug, std::string len_key="packet_len") -> matrix_transpose_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::matrix_transpose.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::matrix_transpose's constructor is in a private implementation class. mimo_ofdm_jrc::matrix_transpose::make is the public interface for creating new instances.

        Args:
            input_len : 
            output_len : 
            interp_factor : 
            debug : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(matrix_transpose_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(matrix_transpose_sptr self, int which, int delay)
        declare_sample_delay(matrix_transpose_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(matrix_transpose_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(matrix_transpose_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(matrix_transpose_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(matrix_transpose_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(matrix_transpose_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(matrix_transpose_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(matrix_transpose_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(matrix_transpose_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(matrix_transpose_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(matrix_transpose_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(matrix_transpose_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(matrix_transpose_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(matrix_transpose_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(matrix_transpose_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(matrix_transpose_sptr self)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(matrix_transpose_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(matrix_transpose_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(matrix_transpose_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(matrix_transpose_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(matrix_transpose_sptr self, long max_output_buffer)
        set_max_output_buffer(matrix_transpose_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(matrix_transpose_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(matrix_transpose_sptr self, long min_output_buffer)
        set_min_output_buffer(matrix_transpose_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(matrix_transpose_sptr self, int which) -> float
        pc_input_buffers_full(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(matrix_transpose_sptr self, int which) -> float
        pc_input_buffers_full_avg(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(matrix_transpose_sptr self, int which) -> float
        pc_input_buffers_full_var(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(matrix_transpose_sptr self, int which) -> float
        pc_output_buffers_full(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(matrix_transpose_sptr self, int which) -> float
        pc_output_buffers_full_avg(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(matrix_transpose_sptr self, int which) -> float
        pc_output_buffers_full_var(matrix_transpose_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(matrix_transpose_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(matrix_transpose_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(matrix_transpose_sptr self)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(matrix_transpose_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(matrix_transpose_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(matrix_transpose_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(matrix_transpose_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(matrix_transpose_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(matrix_transpose_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(matrix_transpose_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(matrix_transpose_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(matrix_transpose_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(matrix_transpose_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(matrix_transpose_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(matrix_transpose_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(matrix_transpose_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(matrix_transpose_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(matrix_transpose_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(matrix_transpose_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(matrix_transpose_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.matrix_transpose_sptr_message_subscribers(self, which_port)

# Register matrix_transpose_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.matrix_transpose_sptr_swigregister(matrix_transpose_sptr)


matrix_transpose_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
matrix_transpose = matrix_transpose.make;

LS = _mimo_ofdm_jrc_swig.LS

STA = _mimo_ofdm_jrc_swig.STA

BPSK = _mimo_ofdm_jrc_swig.BPSK

QPSK = _mimo_ofdm_jrc_swig.QPSK

QAM16 = _mimo_ofdm_jrc_swig.QAM16

class mimo_ofdm_equalizer(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_equalizer.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_equalizer's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_equalizer::make is the public interface for creating new instances.

    Args:
        estimator_algo : 
        freq : 
        bw : 
        fft_len : 
        cp_len : 
        data_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        long_seq : 
        mapped_ltf_symbols : 
        n_mimo_ltf : 
        chan_est_file : 
        comm_log_file : 
        chan_est_data_file : 
        chan_est_ndp_file : 
        stats_record : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_estimator(self, algo: "ChannelEstimator") -> "void":
        r"""set_estimator(mimo_ofdm_equalizer self, ChannelEstimator algo)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_set_estimator(self, algo)

    def set_bandwidth(self, bw: "double") -> "void":
        r"""set_bandwidth(mimo_ofdm_equalizer self, double bw)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_set_bandwidth(self, bw)

    def set_frequency(self, freq: "double") -> "void":
        r"""set_frequency(mimo_ofdm_equalizer self, double freq)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_set_frequency(self, freq)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(mimo_ofdm_equalizer self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_set_stats_record(self, stats_record)

    @staticmethod
    def make(estimator_algo: "ChannelEstimator", freq: "double", bw: "double", fft_len: "int", cp_len: "int", data_carriers: "std::vector< int,std::allocator< int > >", pilot_carriers: "std::vector< int,std::allocator< int > >", pilot_symbols: "gr_vector_vector_complexf", long_seq: "pmt_vector_cfloat", mapped_ltf_symbols: "gr_vector_vector_complexf", n_mimo_ltf: "int", chan_est_file: "std::string const &", comm_log_file: "std::string const &", chan_est_data_file: "std::string const &", chan_est_ndp_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::mimo_ofdm_equalizer::sptr":
        r"""
        make(ChannelEstimator estimator_algo, double freq, double bw, int fft_len, int cp_len, std::vector< int,std::allocator< int > > data_carriers, std::vector< int,std::allocator< int > > pilot_carriers, gr_vector_vector_complexf pilot_symbols, pmt_vector_cfloat long_seq, gr_vector_vector_complexf mapped_ltf_symbols, int n_mimo_ltf, std::string const & chan_est_file, std::string const & comm_log_file, std::string const & chan_est_data_file, std::string const & chan_est_ndp_file, bool stats_record, bool debug) -> mimo_ofdm_equalizer_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_equalizer.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_equalizer's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_equalizer::make is the public interface for creating new instances.

        Args:
            estimator_algo : 
            freq : 
            bw : 
            fft_len : 
            cp_len : 
            data_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            long_seq : 
            mapped_ltf_symbols : 
            n_mimo_ltf : 
            chan_est_file : 
            comm_log_file : 
            chan_est_data_file : 
            chan_est_ndp_file : 
            stats_record : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_make(estimator_algo, freq, bw, fft_len, cp_len, data_carriers, pilot_carriers, pilot_symbols, long_seq, mapped_ltf_symbols, n_mimo_ltf, chan_est_file, comm_log_file, chan_est_data_file, chan_est_ndp_file, stats_record, debug)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_ofdm_equalizer

# Register mimo_ofdm_equalizer in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_swigregister(mimo_ofdm_equalizer)

def mimo_ofdm_equalizer_make(estimator_algo: "ChannelEstimator", freq: "double", bw: "double", fft_len: "int", cp_len: "int", data_carriers: "std::vector< int,std::allocator< int > >", pilot_carriers: "std::vector< int,std::allocator< int > >", pilot_symbols: "gr_vector_vector_complexf", long_seq: "pmt_vector_cfloat", mapped_ltf_symbols: "gr_vector_vector_complexf", n_mimo_ltf: "int", chan_est_file: "std::string const &", comm_log_file: "std::string const &", chan_est_data_file: "std::string const &", chan_est_ndp_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::mimo_ofdm_equalizer::sptr":
    r"""
    mimo_ofdm_equalizer_make(ChannelEstimator estimator_algo, double freq, double bw, int fft_len, int cp_len, std::vector< int,std::allocator< int > > data_carriers, std::vector< int,std::allocator< int > > pilot_carriers, gr_vector_vector_complexf pilot_symbols, pmt_vector_cfloat long_seq, gr_vector_vector_complexf mapped_ltf_symbols, int n_mimo_ltf, std::string const & chan_est_file, std::string const & comm_log_file, std::string const & chan_est_data_file, std::string const & chan_est_ndp_file, bool stats_record, bool debug) -> mimo_ofdm_equalizer_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_equalizer.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_equalizer's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_equalizer::make is the public interface for creating new instances.

    Args:
        estimator_algo : 
        freq : 
        bw : 
        fft_len : 
        cp_len : 
        data_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        long_seq : 
        mapped_ltf_symbols : 
        n_mimo_ltf : 
        chan_est_file : 
        comm_log_file : 
        chan_est_data_file : 
        chan_est_ndp_file : 
        stats_record : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_make(estimator_algo, freq, bw, fft_len, cp_len, data_carriers, pilot_carriers, pilot_symbols, long_seq, mapped_ltf_symbols, n_mimo_ltf, chan_est_file, comm_log_file, chan_est_data_file, chan_est_ndp_file, stats_record, debug)

class mimo_ofdm_equalizer_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::mimo_ofdm_equalizer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mimo_ofdm_equalizer_sptr self) -> mimo_ofdm_equalizer_sptr
        __init__(mimo_ofdm_equalizer_sptr self, mimo_ofdm_equalizer p) -> mimo_ofdm_equalizer_sptr
        """
        _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_mimo_ofdm_equalizer_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::mimo_ofdm_equalizer *":
        r"""__deref__(mimo_ofdm_equalizer_sptr self) -> mimo_ofdm_equalizer"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_ofdm_equalizer_sptr

    def set_estimator(self, algo: "ChannelEstimator") -> "void":
        r"""set_estimator(mimo_ofdm_equalizer_sptr self, ChannelEstimator algo)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_estimator(self, algo)

    def set_bandwidth(self, bw: "double") -> "void":
        r"""set_bandwidth(mimo_ofdm_equalizer_sptr self, double bw)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_bandwidth(self, bw)

    def set_frequency(self, freq: "double") -> "void":
        r"""set_frequency(mimo_ofdm_equalizer_sptr self, double freq)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_frequency(self, freq)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(mimo_ofdm_equalizer_sptr self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_stats_record(self, stats_record)

    def make(self, estimator_algo: "ChannelEstimator", freq: "double", bw: "double", fft_len: "int", cp_len: "int", data_carriers: "std::vector< int,std::allocator< int > >", pilot_carriers: "std::vector< int,std::allocator< int > >", pilot_symbols: "gr_vector_vector_complexf", long_seq: "pmt_vector_cfloat", mapped_ltf_symbols: "gr_vector_vector_complexf", n_mimo_ltf: "int", chan_est_file: "std::string const &", comm_log_file: "std::string const &", chan_est_data_file: "std::string const &", chan_est_ndp_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::mimo_ofdm_equalizer::sptr":
        r"""
        make(mimo_ofdm_equalizer_sptr self, ChannelEstimator estimator_algo, double freq, double bw, int fft_len, int cp_len, std::vector< int,std::allocator< int > > data_carriers, std::vector< int,std::allocator< int > > pilot_carriers, gr_vector_vector_complexf pilot_symbols, pmt_vector_cfloat long_seq, gr_vector_vector_complexf mapped_ltf_symbols, int n_mimo_ltf, std::string const & chan_est_file, std::string const & comm_log_file, std::string const & chan_est_data_file, std::string const & chan_est_ndp_file, bool stats_record, bool debug) -> mimo_ofdm_equalizer_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_equalizer.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_equalizer's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_equalizer::make is the public interface for creating new instances.

        Args:
            estimator_algo : 
            freq : 
            bw : 
            fft_len : 
            cp_len : 
            data_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            long_seq : 
            mapped_ltf_symbols : 
            n_mimo_ltf : 
            chan_est_file : 
            comm_log_file : 
            chan_est_data_file : 
            chan_est_ndp_file : 
            stats_record : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_make(self, estimator_algo, freq, bw, fft_len, cp_len, data_carriers, pilot_carriers, pilot_symbols, long_seq, mapped_ltf_symbols, n_mimo_ltf, chan_est_file, comm_log_file, chan_est_data_file, chan_est_ndp_file, stats_record, debug)

    def history(self) -> "unsigned int":
        r"""history(mimo_ofdm_equalizer_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mimo_ofdm_equalizer_sptr self, int which, int delay)
        declare_sample_delay(mimo_ofdm_equalizer_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mimo_ofdm_equalizer_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mimo_ofdm_equalizer_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mimo_ofdm_equalizer_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mimo_ofdm_equalizer_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mimo_ofdm_equalizer_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mimo_ofdm_equalizer_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mimo_ofdm_equalizer_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mimo_ofdm_equalizer_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mimo_ofdm_equalizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mimo_ofdm_equalizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mimo_ofdm_equalizer_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mimo_ofdm_equalizer_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mimo_ofdm_equalizer_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mimo_ofdm_equalizer_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mimo_ofdm_equalizer_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mimo_ofdm_equalizer_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mimo_ofdm_equalizer_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mimo_ofdm_equalizer_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mimo_ofdm_equalizer_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mimo_ofdm_equalizer_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_ofdm_equalizer_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mimo_ofdm_equalizer_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mimo_ofdm_equalizer_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_ofdm_equalizer_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_input_buffers_full(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_output_buffers_full(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mimo_ofdm_equalizer_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_ofdm_equalizer_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mimo_ofdm_equalizer_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mimo_ofdm_equalizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mimo_ofdm_equalizer_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mimo_ofdm_equalizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mimo_ofdm_equalizer_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mimo_ofdm_equalizer_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mimo_ofdm_equalizer_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mimo_ofdm_equalizer_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mimo_ofdm_equalizer_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mimo_ofdm_equalizer_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mimo_ofdm_equalizer_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mimo_ofdm_equalizer_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mimo_ofdm_equalizer_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mimo_ofdm_equalizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mimo_ofdm_equalizer_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mimo_ofdm_equalizer_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mimo_ofdm_equalizer_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mimo_ofdm_equalizer_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mimo_ofdm_equalizer_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mimo_ofdm_equalizer_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_message_subscribers(self, which_port)

# Register mimo_ofdm_equalizer_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_ofdm_equalizer_sptr_swigregister(mimo_ofdm_equalizer_sptr)


mimo_ofdm_equalizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_ofdm_equalizer = mimo_ofdm_equalizer.make;

class mimo_ofdm_radar(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_radar.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_radar's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_radar::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_sym : 
        N_pre : 
        background_removal : 
        background_recording : 
        record_len : 
        interp_factor : 
        enable_tx_interleave : 
        radar_chan_file : 
        stats_record : 
        len_tag_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_ofdm_radar::sptr":
        r"""
        make(int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & radar_chan_file, bool stats_record, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_ofdm_radar_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_radar.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_radar's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_radar::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_sym : 
            N_pre : 
            background_removal : 
            background_recording : 
            record_len : 
            interp_factor : 
            enable_tx_interleave : 
            radar_chan_file : 
            stats_record : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_make(*args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_ofdm_radar self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_set_background_record(self, background_record)

    def capture_radar_data(self, capture_sig: "bool") -> "void":
        r"""capture_radar_data(mimo_ofdm_radar self, bool capture_sig)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_capture_radar_data(self, capture_sig)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(mimo_ofdm_radar self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_set_stats_record(self, stats_record)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_ofdm_radar

# Register mimo_ofdm_radar in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_ofdm_radar_swigregister(mimo_ofdm_radar)

def mimo_ofdm_radar_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_ofdm_radar::sptr":
    r"""
    mimo_ofdm_radar_make(int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & radar_chan_file, bool stats_record, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_ofdm_radar_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_radar.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_radar's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_radar::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_sym : 
        N_pre : 
        background_removal : 
        background_recording : 
        record_len : 
        interp_factor : 
        enable_tx_interleave : 
        radar_chan_file : 
        stats_record : 
        len_tag_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_make(*args, **kwargs)

class mimo_ofdm_radar_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::mimo_ofdm_radar > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mimo_ofdm_radar_sptr self) -> mimo_ofdm_radar_sptr
        __init__(mimo_ofdm_radar_sptr self, mimo_ofdm_radar p) -> mimo_ofdm_radar_sptr
        """
        _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_mimo_ofdm_radar_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::mimo_ofdm_radar *":
        r"""__deref__(mimo_ofdm_radar_sptr self) -> mimo_ofdm_radar"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_ofdm_radar_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_ofdm_radar::sptr":
        r"""
        make(mimo_ofdm_radar_sptr self, int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & radar_chan_file, bool stats_record, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_ofdm_radar_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_ofdm_radar.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_ofdm_radar's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_ofdm_radar::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_sym : 
            N_pre : 
            background_removal : 
            background_recording : 
            record_len : 
            interp_factor : 
            enable_tx_interleave : 
            radar_chan_file : 
            stats_record : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_make(self, *args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_ofdm_radar_sptr self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_background_record(self, background_record)

    def capture_radar_data(self, capture_sig: "bool") -> "void":
        r"""capture_radar_data(mimo_ofdm_radar_sptr self, bool capture_sig)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_capture_radar_data(self, capture_sig)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(mimo_ofdm_radar_sptr self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_stats_record(self, stats_record)

    def history(self) -> "unsigned int":
        r"""history(mimo_ofdm_radar_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mimo_ofdm_radar_sptr self, int which, int delay)
        declare_sample_delay(mimo_ofdm_radar_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mimo_ofdm_radar_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mimo_ofdm_radar_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mimo_ofdm_radar_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mimo_ofdm_radar_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mimo_ofdm_radar_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mimo_ofdm_radar_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mimo_ofdm_radar_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mimo_ofdm_radar_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mimo_ofdm_radar_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mimo_ofdm_radar_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mimo_ofdm_radar_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mimo_ofdm_radar_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mimo_ofdm_radar_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mimo_ofdm_radar_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mimo_ofdm_radar_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mimo_ofdm_radar_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mimo_ofdm_radar_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mimo_ofdm_radar_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mimo_ofdm_radar_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mimo_ofdm_radar_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_ofdm_radar_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mimo_ofdm_radar_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mimo_ofdm_radar_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_ofdm_radar_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mimo_ofdm_radar_sptr self, int which) -> float
        pc_input_buffers_full(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mimo_ofdm_radar_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mimo_ofdm_radar_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mimo_ofdm_radar_sptr self, int which) -> float
        pc_output_buffers_full(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mimo_ofdm_radar_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mimo_ofdm_radar_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_ofdm_radar_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mimo_ofdm_radar_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mimo_ofdm_radar_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mimo_ofdm_radar_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mimo_ofdm_radar_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mimo_ofdm_radar_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mimo_ofdm_radar_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mimo_ofdm_radar_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mimo_ofdm_radar_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mimo_ofdm_radar_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mimo_ofdm_radar_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mimo_ofdm_radar_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mimo_ofdm_radar_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mimo_ofdm_radar_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mimo_ofdm_radar_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mimo_ofdm_radar_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mimo_ofdm_radar_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mimo_ofdm_radar_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mimo_ofdm_radar_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mimo_ofdm_radar_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mimo_ofdm_radar_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_message_subscribers(self, which_port)

# Register mimo_ofdm_radar_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_ofdm_radar_sptr_swigregister(mimo_ofdm_radar_sptr)


mimo_ofdm_radar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_ofdm_radar = mimo_ofdm_radar.make;

class mimo_precoder(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_precoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_precoder's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_precoder::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_ss : 
        data_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        sync_words : 
        mapped_ltf_symbols : 
        chan_est_file : 
        chan_est_smoothing : 
        radar_log_file : 
        radar_aided : 
        phased_steering : 
        use_radar_streams : 
        len_tag_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_precoder::sptr":
        r"""
        make(int fft_len, int N_tx, int N_ss, std::vector< int,std::allocator< int > > const & data_carriers, std::vector< int,std::allocator< int > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, gr_vector_vector_complexf mapped_ltf_symbols, std::string const & chan_est_file, bool chan_est_smoothing, std::string const & radar_log_file, bool radar_aided, bool phased_steering, bool use_radar_streams, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_precoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_precoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_precoder's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_precoder::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_ss : 
            data_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            sync_words : 
            mapped_ltf_symbols : 
            chan_est_file : 
            chan_est_smoothing : 
            radar_log_file : 
            radar_aided : 
            phased_steering : 
            use_radar_streams : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_make(*args, **kwargs)

    def set_chan_est_smoothing(self, chan_est_smoothing: "bool") -> "void":
        r"""set_chan_est_smoothing(mimo_precoder self, bool chan_est_smoothing)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_set_chan_est_smoothing(self, chan_est_smoothing)

    def set_radar_aided(self, radar_aided: "bool") -> "void":
        r"""set_radar_aided(mimo_precoder self, bool radar_aided)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_set_radar_aided(self, radar_aided)

    def set_use_radar_streams(self, use_radar_streams: "bool") -> "void":
        r"""set_use_radar_streams(mimo_precoder self, bool use_radar_streams)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_set_use_radar_streams(self, use_radar_streams)

    def set_phased_steering(self, phased_steering: "bool") -> "void":
        r"""set_phased_steering(mimo_precoder self, bool phased_steering)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_set_phased_steering(self, phased_steering)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_precoder

# Register mimo_precoder in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_precoder_swigregister(mimo_precoder)

def mimo_precoder_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_precoder::sptr":
    r"""
    mimo_precoder_make(int fft_len, int N_tx, int N_ss, std::vector< int,std::allocator< int > > const & data_carriers, std::vector< int,std::allocator< int > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, gr_vector_vector_complexf mapped_ltf_symbols, std::string const & chan_est_file, bool chan_est_smoothing, std::string const & radar_log_file, bool radar_aided, bool phased_steering, bool use_radar_streams, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_precoder_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_precoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_precoder's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_precoder::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_ss : 
        data_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        sync_words : 
        mapped_ltf_symbols : 
        chan_est_file : 
        chan_est_smoothing : 
        radar_log_file : 
        radar_aided : 
        phased_steering : 
        use_radar_streams : 
        len_tag_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.mimo_precoder_make(*args, **kwargs)

class mimo_precoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::mimo_precoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mimo_precoder_sptr self) -> mimo_precoder_sptr
        __init__(mimo_precoder_sptr self, mimo_precoder p) -> mimo_precoder_sptr
        """
        _mimo_ofdm_jrc_swig.mimo_precoder_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_mimo_precoder_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::mimo_precoder *":
        r"""__deref__(mimo_precoder_sptr self) -> mimo_precoder"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_precoder_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_precoder::sptr":
        r"""
        make(mimo_precoder_sptr self, int fft_len, int N_tx, int N_ss, std::vector< int,std::allocator< int > > const & data_carriers, std::vector< int,std::allocator< int > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, gr_vector_vector_complexf mapped_ltf_symbols, std::string const & chan_est_file, bool chan_est_smoothing, std::string const & radar_log_file, bool radar_aided, bool phased_steering, bool use_radar_streams, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_precoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_precoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_precoder's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_precoder::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_ss : 
            data_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            sync_words : 
            mapped_ltf_symbols : 
            chan_est_file : 
            chan_est_smoothing : 
            radar_log_file : 
            radar_aided : 
            phased_steering : 
            use_radar_streams : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_make(self, *args, **kwargs)

    def set_chan_est_smoothing(self, chan_est_smoothing: "bool") -> "void":
        r"""set_chan_est_smoothing(mimo_precoder_sptr self, bool chan_est_smoothing)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_chan_est_smoothing(self, chan_est_smoothing)

    def set_radar_aided(self, radar_aided: "bool") -> "void":
        r"""set_radar_aided(mimo_precoder_sptr self, bool radar_aided)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_radar_aided(self, radar_aided)

    def set_use_radar_streams(self, use_radar_streams: "bool") -> "void":
        r"""set_use_radar_streams(mimo_precoder_sptr self, bool use_radar_streams)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_use_radar_streams(self, use_radar_streams)

    def set_phased_steering(self, phased_steering: "bool") -> "void":
        r"""set_phased_steering(mimo_precoder_sptr self, bool phased_steering)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_phased_steering(self, phased_steering)

    def history(self) -> "unsigned int":
        r"""history(mimo_precoder_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mimo_precoder_sptr self, int which, int delay)
        declare_sample_delay(mimo_precoder_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mimo_precoder_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mimo_precoder_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mimo_precoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mimo_precoder_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mimo_precoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mimo_precoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mimo_precoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mimo_precoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mimo_precoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mimo_precoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mimo_precoder_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mimo_precoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mimo_precoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mimo_precoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mimo_precoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mimo_precoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mimo_precoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mimo_precoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mimo_precoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mimo_precoder_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_precoder_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mimo_precoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mimo_precoder_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_precoder_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mimo_precoder_sptr self, int which) -> float
        pc_input_buffers_full(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mimo_precoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mimo_precoder_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mimo_precoder_sptr self, int which) -> float
        pc_output_buffers_full(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mimo_precoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mimo_precoder_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_precoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mimo_precoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mimo_precoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mimo_precoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mimo_precoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mimo_precoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mimo_precoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mimo_precoder_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mimo_precoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mimo_precoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mimo_precoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mimo_precoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mimo_precoder_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mimo_precoder_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mimo_precoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mimo_precoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mimo_precoder_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mimo_precoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mimo_precoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mimo_precoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mimo_precoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_precoder_sptr_message_subscribers(self, which_port)

# Register mimo_precoder_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_precoder_sptr_swigregister(mimo_precoder_sptr)


mimo_precoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_precoder = mimo_precoder.make;

class mimo_radar_estimator(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_ltf : 
        N_sync : 
        P_ltf : 
        ltf_seq : 
        background_removal : 
        background_record : 
        averaging_depth : 
        interp_factor : 
        enable_tx_interleave : 
        len_tag_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator::sptr":
        r"""
        make(int fft_len, int N_tx, int N_rx, int N_ltf, int N_sync, gr_vector_vector_complexf P_ltf, pmt_vector_cfloat ltf_seq, bool background_removal, bool background_record, int averaging_depth, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_ltf : 
            N_sync : 
            P_ltf : 
            ltf_seq : 
            background_removal : 
            background_record : 
            averaging_depth : 
            interp_factor : 
            enable_tx_interleave : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_make(*args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_radar_estimator self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_set_background_record(self, background_record)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_radar_estimator

# Register mimo_radar_estimator in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_radar_estimator_swigregister(mimo_radar_estimator)

def mimo_radar_estimator_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator::sptr":
    r"""
    mimo_radar_estimator_make(int fft_len, int N_tx, int N_rx, int N_ltf, int N_sync, gr_vector_vector_complexf P_ltf, pmt_vector_cfloat ltf_seq, bool background_removal, bool background_record, int averaging_depth, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_ltf : 
        N_sync : 
        P_ltf : 
        ltf_seq : 
        background_removal : 
        background_record : 
        averaging_depth : 
        interp_factor : 
        enable_tx_interleave : 
        len_tag_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.mimo_radar_estimator_make(*args, **kwargs)

class mimo_radar_estimator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::mimo_radar_estimator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mimo_radar_estimator_sptr self) -> mimo_radar_estimator_sptr
        __init__(mimo_radar_estimator_sptr self, mimo_radar_estimator p) -> mimo_radar_estimator_sptr
        """
        _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_mimo_radar_estimator_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator *":
        r"""__deref__(mimo_radar_estimator_sptr self) -> mimo_radar_estimator"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_radar_estimator_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator::sptr":
        r"""
        make(mimo_radar_estimator_sptr self, int fft_len, int N_tx, int N_rx, int N_ltf, int N_sync, gr_vector_vector_complexf P_ltf, pmt_vector_cfloat ltf_seq, bool background_removal, bool background_record, int averaging_depth, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_ltf : 
            N_sync : 
            P_ltf : 
            ltf_seq : 
            background_removal : 
            background_record : 
            averaging_depth : 
            interp_factor : 
            enable_tx_interleave : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_make(self, *args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_radar_estimator_sptr self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_background_record(self, background_record)

    def history(self) -> "unsigned int":
        r"""history(mimo_radar_estimator_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mimo_radar_estimator_sptr self, int which, int delay)
        declare_sample_delay(mimo_radar_estimator_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mimo_radar_estimator_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mimo_radar_estimator_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mimo_radar_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mimo_radar_estimator_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mimo_radar_estimator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mimo_radar_estimator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mimo_radar_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mimo_radar_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mimo_radar_estimator_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mimo_radar_estimator_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mimo_radar_estimator_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mimo_radar_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mimo_radar_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mimo_radar_estimator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mimo_radar_estimator_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mimo_radar_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mimo_radar_estimator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mimo_radar_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mimo_radar_estimator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mimo_radar_estimator_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_radar_estimator_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mimo_radar_estimator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mimo_radar_estimator_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_radar_estimator_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mimo_radar_estimator_sptr self, int which) -> float
        pc_input_buffers_full(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mimo_radar_estimator_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mimo_radar_estimator_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mimo_radar_estimator_sptr self, int which) -> float
        pc_output_buffers_full(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mimo_radar_estimator_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mimo_radar_estimator_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_radar_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mimo_radar_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mimo_radar_estimator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mimo_radar_estimator_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mimo_radar_estimator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mimo_radar_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mimo_radar_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mimo_radar_estimator_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mimo_radar_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mimo_radar_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mimo_radar_estimator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mimo_radar_estimator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mimo_radar_estimator_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mimo_radar_estimator_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mimo_radar_estimator_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mimo_radar_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mimo_radar_estimator_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mimo_radar_estimator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mimo_radar_estimator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mimo_radar_estimator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mimo_radar_estimator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_message_subscribers(self, which_port)

# Register mimo_radar_estimator_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_radar_estimator_sptr_swigregister(mimo_radar_estimator_sptr)


mimo_radar_estimator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_radar_estimator = mimo_radar_estimator.make;

class mimo_radar_estimator_2(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator_2.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator_2's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator_2::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_sym : 
        N_pre : 
        background_removal : 
        background_recording : 
        record_len : 
        interp_factor : 
        enable_tx_interleave : 
        len_tag_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator_2::sptr":
        r"""
        make(int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_2_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator_2.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator_2's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator_2::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_sym : 
            N_pre : 
            background_removal : 
            background_recording : 
            record_len : 
            interp_factor : 
            enable_tx_interleave : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_make(*args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_radar_estimator_2 self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_set_background_record(self, background_record)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_radar_estimator_2

# Register mimo_radar_estimator_2 in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_radar_estimator_2_swigregister(mimo_radar_estimator_2)

def mimo_radar_estimator_2_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator_2::sptr":
    r"""
    mimo_radar_estimator_2_make(int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_2_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator_2.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator_2's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator_2::make is the public interface for creating new instances.

    Args:
        fft_len : 
        N_tx : 
        N_rx : 
        N_sym : 
        N_pre : 
        background_removal : 
        background_recording : 
        record_len : 
        interp_factor : 
        enable_tx_interleave : 
        len_tag_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_make(*args, **kwargs)

class mimo_radar_estimator_2_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::mimo_radar_estimator_2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mimo_radar_estimator_2_sptr self) -> mimo_radar_estimator_2_sptr
        __init__(mimo_radar_estimator_2_sptr self, mimo_radar_estimator_2 p) -> mimo_radar_estimator_2_sptr
        """
        _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_mimo_radar_estimator_2_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator_2 *":
        r"""__deref__(mimo_radar_estimator_2_sptr self) -> mimo_radar_estimator_2"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_mimo_radar_estimator_2_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::mimo_radar_estimator_2::sptr":
        r"""
        make(mimo_radar_estimator_2_sptr self, int fft_len, int N_tx, int N_rx, int N_sym, int N_pre, bool background_removal, bool background_recording, int record_len, int interp_factor, bool enable_tx_interleave, std::string const & len_tag_key="packet_len", bool debug=False) -> mimo_radar_estimator_2_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::mimo_radar_estimator_2.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::mimo_radar_estimator_2's constructor is in a private implementation class. mimo_ofdm_jrc::mimo_radar_estimator_2::make is the public interface for creating new instances.

        Args:
            fft_len : 
            N_tx : 
            N_rx : 
            N_sym : 
            N_pre : 
            background_removal : 
            background_recording : 
            record_len : 
            interp_factor : 
            enable_tx_interleave : 
            len_tag_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_make(self, *args, **kwargs)

    def set_background_record(self, background_record: "bool") -> "void":
        r"""set_background_record(mimo_radar_estimator_2_sptr self, bool background_record)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_background_record(self, background_record)

    def history(self) -> "unsigned int":
        r"""history(mimo_radar_estimator_2_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mimo_radar_estimator_2_sptr self, int which, int delay)
        declare_sample_delay(mimo_radar_estimator_2_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mimo_radar_estimator_2_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mimo_radar_estimator_2_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mimo_radar_estimator_2_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mimo_radar_estimator_2_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mimo_radar_estimator_2_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mimo_radar_estimator_2_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mimo_radar_estimator_2_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mimo_radar_estimator_2_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mimo_radar_estimator_2_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mimo_radar_estimator_2_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mimo_radar_estimator_2_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mimo_radar_estimator_2_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mimo_radar_estimator_2_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mimo_radar_estimator_2_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mimo_radar_estimator_2_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mimo_radar_estimator_2_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mimo_radar_estimator_2_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mimo_radar_estimator_2_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mimo_radar_estimator_2_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mimo_radar_estimator_2_sptr self, long max_output_buffer)
        set_max_output_buffer(mimo_radar_estimator_2_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mimo_radar_estimator_2_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mimo_radar_estimator_2_sptr self, long min_output_buffer)
        set_min_output_buffer(mimo_radar_estimator_2_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_input_buffers_full(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_input_buffers_full_avg(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_input_buffers_full_var(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_output_buffers_full(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_output_buffers_full_avg(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mimo_radar_estimator_2_sptr self, int which) -> float
        pc_output_buffers_full_var(mimo_radar_estimator_2_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mimo_radar_estimator_2_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mimo_radar_estimator_2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mimo_radar_estimator_2_sptr self)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mimo_radar_estimator_2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mimo_radar_estimator_2_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mimo_radar_estimator_2_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mimo_radar_estimator_2_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mimo_radar_estimator_2_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mimo_radar_estimator_2_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mimo_radar_estimator_2_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mimo_radar_estimator_2_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mimo_radar_estimator_2_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mimo_radar_estimator_2_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mimo_radar_estimator_2_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mimo_radar_estimator_2_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mimo_radar_estimator_2_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mimo_radar_estimator_2_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mimo_radar_estimator_2_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mimo_radar_estimator_2_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mimo_radar_estimator_2_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_message_subscribers(self, which_port)

# Register mimo_radar_estimator_2_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.mimo_radar_estimator_2_sptr_swigregister(mimo_radar_estimator_2_sptr)


mimo_radar_estimator_2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mimo_radar_estimator_2 = mimo_radar_estimator_2.make;

class moving_avg(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::moving_avg.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::moving_avg's constructor is in a private implementation class. mimo_ofdm_jrc::moving_avg::make is the public interface for creating new instances.

    Args:
        length : 
        scale : 
        max_iter : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(length: "int", scale: "float", max_iter: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::moving_avg::sptr":
        r"""
        make(int length, float scale, int max_iter, bool debug) -> moving_avg_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::moving_avg.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::moving_avg's constructor is in a private implementation class. mimo_ofdm_jrc::moving_avg::make is the public interface for creating new instances.

        Args:
            length : 
            scale : 
            max_iter : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.moving_avg_make(length, scale, max_iter, debug)

    def length(self) -> "int":
        r"""
        length(moving_avg self) -> int
        Return the number of elements in v.
        """
        return _mimo_ofdm_jrc_swig.moving_avg_length(self)

    def scale(self) -> "float":
        r"""scale(moving_avg self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_scale(self)

    def set_length_and_scale(self, length: "int", scale: "float") -> "void":
        r"""set_length_and_scale(moving_avg self, int length, float scale)"""
        return _mimo_ofdm_jrc_swig.moving_avg_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""set_length(moving_avg self, int length)"""
        return _mimo_ofdm_jrc_swig.moving_avg_set_length(self, length)

    def set_scale(self, scale: "float") -> "void":
        r"""set_scale(moving_avg self, float scale)"""
        return _mimo_ofdm_jrc_swig.moving_avg_set_scale(self, scale)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_moving_avg

# Register moving_avg in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.moving_avg_swigregister(moving_avg)

def moving_avg_make(length: "int", scale: "float", max_iter: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::moving_avg::sptr":
    r"""
    moving_avg_make(int length, float scale, int max_iter, bool debug) -> moving_avg_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::moving_avg.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::moving_avg's constructor is in a private implementation class. mimo_ofdm_jrc::moving_avg::make is the public interface for creating new instances.

    Args:
        length : 
        scale : 
        max_iter : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.moving_avg_make(length, scale, max_iter, debug)

class moving_avg_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::moving_avg > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(moving_avg_sptr self) -> moving_avg_sptr
        __init__(moving_avg_sptr self, moving_avg p) -> moving_avg_sptr
        """
        _mimo_ofdm_jrc_swig.moving_avg_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_moving_avg_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::moving_avg *":
        r"""__deref__(moving_avg_sptr self) -> moving_avg"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_moving_avg_sptr

    def make(self, length: "int", scale: "float", max_iter: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::moving_avg::sptr":
        r"""
        make(moving_avg_sptr self, int length, float scale, int max_iter, bool debug) -> moving_avg_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::moving_avg.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::moving_avg's constructor is in a private implementation class. mimo_ofdm_jrc::moving_avg::make is the public interface for creating new instances.

        Args:
            length : 
            scale : 
            max_iter : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_make(self, length, scale, max_iter, debug)

    def length(self) -> "int":
        r"""
        length(moving_avg_sptr self) -> int
        Return the number of elements in v.
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_length(self)

    def scale(self) -> "float":
        r"""scale(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_scale(self)

    def set_length_and_scale(self, length: "int", scale: "float") -> "void":
        r"""set_length_and_scale(moving_avg_sptr self, int length, float scale)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_length_and_scale(self, length, scale)

    def set_length(self, length: "int") -> "void":
        r"""set_length(moving_avg_sptr self, int length)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_length(self, length)

    def set_scale(self, scale: "float") -> "void":
        r"""set_scale(moving_avg_sptr self, float scale)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_scale(self, scale)

    def history(self) -> "unsigned int":
        r"""history(moving_avg_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(moving_avg_sptr self, int which, int delay)
        declare_sample_delay(moving_avg_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(moving_avg_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(moving_avg_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(moving_avg_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(moving_avg_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(moving_avg_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(moving_avg_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(moving_avg_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(moving_avg_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(moving_avg_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(moving_avg_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(moving_avg_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(moving_avg_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(moving_avg_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(moving_avg_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(moving_avg_sptr self)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(moving_avg_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(moving_avg_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(moving_avg_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(moving_avg_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(moving_avg_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_avg_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(moving_avg_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(moving_avg_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_avg_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(moving_avg_sptr self, int which) -> float
        pc_input_buffers_full(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(moving_avg_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(moving_avg_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(moving_avg_sptr self, int which) -> float
        pc_output_buffers_full(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(moving_avg_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(moving_avg_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_avg_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(moving_avg_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(moving_avg_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(moving_avg_sptr self)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(moving_avg_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(moving_avg_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(moving_avg_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(moving_avg_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(moving_avg_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(moving_avg_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(moving_avg_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(moving_avg_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(moving_avg_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(moving_avg_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(moving_avg_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(moving_avg_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(moving_avg_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(moving_avg_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(moving_avg_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(moving_avg_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(moving_avg_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.moving_avg_sptr_message_subscribers(self, which_port)

# Register moving_avg_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.moving_avg_sptr_swigregister(moving_avg_sptr)


moving_avg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_avg = moving_avg.make;

class ofdm_cyclic_prefix_remover(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_cyclic_prefix_remover.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_cyclic_prefix_remover's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::sptr":
        r"""
        make(int fft_len, int cp_len, std::string len_key="packet_len") -> ofdm_cyclic_prefix_remover_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_cyclic_prefix_remover.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_cyclic_prefix_remover's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_make(*args, **kwargs)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ofdm_cyclic_prefix_remover

# Register ofdm_cyclic_prefix_remover in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_swigregister(ofdm_cyclic_prefix_remover)

def ofdm_cyclic_prefix_remover_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::sptr":
    r"""
    ofdm_cyclic_prefix_remover_make(int fft_len, int cp_len, std::string len_key="packet_len") -> ofdm_cyclic_prefix_remover_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_cyclic_prefix_remover.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_cyclic_prefix_remover's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::make is the public interface for creating new instances.

    Args:
        fft_len : 
        cp_len : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_make(*args, **kwargs)

class ofdm_cyclic_prefix_remover_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::ofdm_cyclic_prefix_remover > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ofdm_cyclic_prefix_remover_sptr self) -> ofdm_cyclic_prefix_remover_sptr
        __init__(ofdm_cyclic_prefix_remover_sptr self, ofdm_cyclic_prefix_remover p) -> ofdm_cyclic_prefix_remover_sptr
        """
        _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_ofdm_cyclic_prefix_remover_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::ofdm_cyclic_prefix_remover *":
        r"""__deref__(ofdm_cyclic_prefix_remover_sptr self) -> ofdm_cyclic_prefix_remover"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ofdm_cyclic_prefix_remover_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::sptr":
        r"""
        make(ofdm_cyclic_prefix_remover_sptr self, int fft_len, int cp_len, std::string len_key="packet_len") -> ofdm_cyclic_prefix_remover_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_cyclic_prefix_remover.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_cyclic_prefix_remover's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_cyclic_prefix_remover::make is the public interface for creating new instances.

        Args:
            fft_len : 
            cp_len : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(ofdm_cyclic_prefix_remover_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(ofdm_cyclic_prefix_remover_sptr self, int which, int delay)
        declare_sample_delay(ofdm_cyclic_prefix_remover_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(ofdm_cyclic_prefix_remover_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(ofdm_cyclic_prefix_remover_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(ofdm_cyclic_prefix_remover_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(ofdm_cyclic_prefix_remover_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(ofdm_cyclic_prefix_remover_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(ofdm_cyclic_prefix_remover_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(ofdm_cyclic_prefix_remover_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(ofdm_cyclic_prefix_remover_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(ofdm_cyclic_prefix_remover_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(ofdm_cyclic_prefix_remover_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(ofdm_cyclic_prefix_remover_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(ofdm_cyclic_prefix_remover_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(ofdm_cyclic_prefix_remover_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(ofdm_cyclic_prefix_remover_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(ofdm_cyclic_prefix_remover_sptr self)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(ofdm_cyclic_prefix_remover_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(ofdm_cyclic_prefix_remover_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(ofdm_cyclic_prefix_remover_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(ofdm_cyclic_prefix_remover_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(ofdm_cyclic_prefix_remover_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_cyclic_prefix_remover_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(ofdm_cyclic_prefix_remover_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(ofdm_cyclic_prefix_remover_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_cyclic_prefix_remover_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(ofdm_cyclic_prefix_remover_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_cyclic_prefix_remover_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(ofdm_cyclic_prefix_remover_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(ofdm_cyclic_prefix_remover_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(ofdm_cyclic_prefix_remover_sptr self)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(ofdm_cyclic_prefix_remover_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(ofdm_cyclic_prefix_remover_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(ofdm_cyclic_prefix_remover_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(ofdm_cyclic_prefix_remover_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(ofdm_cyclic_prefix_remover_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(ofdm_cyclic_prefix_remover_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(ofdm_cyclic_prefix_remover_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(ofdm_cyclic_prefix_remover_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(ofdm_cyclic_prefix_remover_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(ofdm_cyclic_prefix_remover_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(ofdm_cyclic_prefix_remover_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(ofdm_cyclic_prefix_remover_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(ofdm_cyclic_prefix_remover_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(ofdm_cyclic_prefix_remover_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(ofdm_cyclic_prefix_remover_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(ofdm_cyclic_prefix_remover_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(ofdm_cyclic_prefix_remover_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_message_subscribers(self, which_port)

# Register ofdm_cyclic_prefix_remover_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ofdm_cyclic_prefix_remover_sptr_swigregister(ofdm_cyclic_prefix_remover_sptr)


ofdm_cyclic_prefix_remover_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_cyclic_prefix_remover = ofdm_cyclic_prefix_remover.make;

class ofdm_frame_generator(object):
    r"""
    Create frequency domain OFDM symbols from complex values, add pilots.

    This block turns a stream of complex, scalar modulation symbols into vectors which are the input for an IFFT in an OFDM transmitter. It also supports the possibility of placing pilot symbols onto the carriers.


    The carriers can be allocated freely, if a carrier is not allocated, it is set to zero. This allows doing OFDMA-style carrier allocations.


    Input: A tagged stream of complex scalars. The first item must have a tag containing the number of complex symbols in this frame. Output: A tagged stream of complex vectors of length fft_len. This can directly be connected to an FFT block. Make sure to set this block to 'reverse' for the IFFT. If  is true, the FFT block must activate FFT shifting, otherwise, set shifting to false. If given, sync words are prepended to the output. Note that sync words are prepended verbatim, make sure they are shifted (or not).


    Carrier indexes are always such that index 0 is the DC carrier (note: you should not allocate this carrier). The carriers below the DC carrier are either indexed with negative numbers, or with indexes larger than . Index -1 and index  both identify the carrier below the DC carrier.


    There are some basic checks in place during initialization which check that the carrier allocation table is valid. However, it is possible to overwrite data symbols with pilot symbols, or provide a carrier allocation that has mismatching pilot symbol positions and -values.


    Tags are propagated such that a tag on an incoming complex symbol is mapped to the corresponding OFDM symbol. There is one exception: If a tag is on the first OFDM symbol, it is assumed that this tag should stay there, so it is moved to the front even if a sync word is included (any other tags will never be attached to the sync word). This allows tags to control the transmit timing to pass through in the correct position.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_frame_generator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_frame_generator's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_frame_generator::make is the public interface for creating new instances.

    Args:
        fft_len : 
        occupied_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        sync_words : 
        ltf_len : 
        len_tag_key : 
        output_is_shifted : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def len_tag_key(self) -> "std::string":
        r"""len_tag_key(ofdm_frame_generator self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_len_tag_key(self)

    def fft_len(self) -> "int const":
        r"""fft_len(ofdm_frame_generator self) -> int const"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_fft_len(self)

    def occupied_carriers(self) -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >":
        r"""occupied_carriers(ofdm_frame_generator self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_occupied_carriers(self)

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_frame_generator::sptr":
        r"""
        make(int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, int ltf_len, std::string const & len_tag_key="packet_len", bool const output_is_shifted=True) -> ofdm_frame_generator_sptr
        Create frequency domain OFDM symbols from complex values, add pilots.

        This block turns a stream of complex, scalar modulation symbols into vectors which are the input for an IFFT in an OFDM transmitter. It also supports the possibility of placing pilot symbols onto the carriers.


        The carriers can be allocated freely, if a carrier is not allocated, it is set to zero. This allows doing OFDMA-style carrier allocations.


        Input: A tagged stream of complex scalars. The first item must have a tag containing the number of complex symbols in this frame. Output: A tagged stream of complex vectors of length fft_len. This can directly be connected to an FFT block. Make sure to set this block to 'reverse' for the IFFT. If  is true, the FFT block must activate FFT shifting, otherwise, set shifting to false. If given, sync words are prepended to the output. Note that sync words are prepended verbatim, make sure they are shifted (or not).


        Carrier indexes are always such that index 0 is the DC carrier (note: you should not allocate this carrier). The carriers below the DC carrier are either indexed with negative numbers, or with indexes larger than . Index -1 and index  both identify the carrier below the DC carrier.


        There are some basic checks in place during initialization which check that the carrier allocation table is valid. However, it is possible to overwrite data symbols with pilot symbols, or provide a carrier allocation that has mismatching pilot symbol positions and -values.


        Tags are propagated such that a tag on an incoming complex symbol is mapped to the corresponding OFDM symbol. There is one exception: If a tag is on the first OFDM symbol, it is assumed that this tag should stay there, so it is moved to the front even if a sync word is included (any other tags will never be attached to the sync word). This allows tags to control the transmit timing to pass through in the correct position.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_frame_generator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_frame_generator's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_frame_generator::make is the public interface for creating new instances.

        Args:
            fft_len : 
            occupied_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            sync_words : 
            ltf_len : 
            len_tag_key : 
            output_is_shifted : 
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_make(*args, **kwargs)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ofdm_frame_generator

# Register ofdm_frame_generator in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ofdm_frame_generator_swigregister(ofdm_frame_generator)

def ofdm_frame_generator_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_frame_generator::sptr":
    r"""
    ofdm_frame_generator_make(int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, int ltf_len, std::string const & len_tag_key="packet_len", bool const output_is_shifted=True) -> ofdm_frame_generator_sptr
    Create frequency domain OFDM symbols from complex values, add pilots.

    This block turns a stream of complex, scalar modulation symbols into vectors which are the input for an IFFT in an OFDM transmitter. It also supports the possibility of placing pilot symbols onto the carriers.


    The carriers can be allocated freely, if a carrier is not allocated, it is set to zero. This allows doing OFDMA-style carrier allocations.


    Input: A tagged stream of complex scalars. The first item must have a tag containing the number of complex symbols in this frame. Output: A tagged stream of complex vectors of length fft_len. This can directly be connected to an FFT block. Make sure to set this block to 'reverse' for the IFFT. If  is true, the FFT block must activate FFT shifting, otherwise, set shifting to false. If given, sync words are prepended to the output. Note that sync words are prepended verbatim, make sure they are shifted (or not).


    Carrier indexes are always such that index 0 is the DC carrier (note: you should not allocate this carrier). The carriers below the DC carrier are either indexed with negative numbers, or with indexes larger than . Index -1 and index  both identify the carrier below the DC carrier.


    There are some basic checks in place during initialization which check that the carrier allocation table is valid. However, it is possible to overwrite data symbols with pilot symbols, or provide a carrier allocation that has mismatching pilot symbol positions and -values.


    Tags are propagated such that a tag on an incoming complex symbol is mapped to the corresponding OFDM symbol. There is one exception: If a tag is on the first OFDM symbol, it is assumed that this tag should stay there, so it is moved to the front even if a sync word is included (any other tags will never be attached to the sync word). This allows tags to control the transmit timing to pass through in the correct position.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_frame_generator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_frame_generator's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_frame_generator::make is the public interface for creating new instances.

    Args:
        fft_len : 
        occupied_carriers : 
        pilot_carriers : 
        pilot_symbols : 
        sync_words : 
        ltf_len : 
        len_tag_key : 
        output_is_shifted : 
    """
    return _mimo_ofdm_jrc_swig.ofdm_frame_generator_make(*args, **kwargs)

class ofdm_frame_generator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::ofdm_frame_generator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ofdm_frame_generator_sptr self) -> ofdm_frame_generator_sptr
        __init__(ofdm_frame_generator_sptr self, ofdm_frame_generator p) -> ofdm_frame_generator_sptr
        """
        _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_ofdm_frame_generator_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::ofdm_frame_generator *":
        r"""__deref__(ofdm_frame_generator_sptr self) -> ofdm_frame_generator"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ofdm_frame_generator_sptr

    def len_tag_key(self) -> "std::string":
        r"""len_tag_key(ofdm_frame_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_len_tag_key(self)

    def fft_len(self) -> "int const":
        r"""fft_len(ofdm_frame_generator_sptr self) -> int const"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_fft_len(self)

    def occupied_carriers(self) -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >":
        r"""occupied_carriers(ofdm_frame_generator_sptr self) -> std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_occupied_carriers(self)

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::ofdm_frame_generator::sptr":
        r"""
        make(ofdm_frame_generator_sptr self, int fft_len, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, gr_vector_vector_complexf sync_words, int ltf_len, std::string const & len_tag_key="packet_len", bool const output_is_shifted=True) -> ofdm_frame_generator_sptr
        Create frequency domain OFDM symbols from complex values, add pilots.

        This block turns a stream of complex, scalar modulation symbols into vectors which are the input for an IFFT in an OFDM transmitter. It also supports the possibility of placing pilot symbols onto the carriers.


        The carriers can be allocated freely, if a carrier is not allocated, it is set to zero. This allows doing OFDMA-style carrier allocations.


        Input: A tagged stream of complex scalars. The first item must have a tag containing the number of complex symbols in this frame. Output: A tagged stream of complex vectors of length fft_len. This can directly be connected to an FFT block. Make sure to set this block to 'reverse' for the IFFT. If  is true, the FFT block must activate FFT shifting, otherwise, set shifting to false. If given, sync words are prepended to the output. Note that sync words are prepended verbatim, make sure they are shifted (or not).


        Carrier indexes are always such that index 0 is the DC carrier (note: you should not allocate this carrier). The carriers below the DC carrier are either indexed with negative numbers, or with indexes larger than . Index -1 and index  both identify the carrier below the DC carrier.


        There are some basic checks in place during initialization which check that the carrier allocation table is valid. However, it is possible to overwrite data symbols with pilot symbols, or provide a carrier allocation that has mismatching pilot symbol positions and -values.


        Tags are propagated such that a tag on an incoming complex symbol is mapped to the corresponding OFDM symbol. There is one exception: If a tag is on the first OFDM symbol, it is assumed that this tag should stay there, so it is moved to the front even if a sync word is included (any other tags will never be attached to the sync word). This allows tags to control the transmit timing to pass through in the correct position.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::ofdm_frame_generator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::ofdm_frame_generator's constructor is in a private implementation class. mimo_ofdm_jrc::ofdm_frame_generator::make is the public interface for creating new instances.

        Args:
            fft_len : 
            occupied_carriers : 
            pilot_carriers : 
            pilot_symbols : 
            sync_words : 
            ltf_len : 
            len_tag_key : 
            output_is_shifted : 
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_make(self, *args, **kwargs)

    def history(self) -> "unsigned int":
        r"""history(ofdm_frame_generator_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(ofdm_frame_generator_sptr self, int which, int delay)
        declare_sample_delay(ofdm_frame_generator_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(ofdm_frame_generator_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(ofdm_frame_generator_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(ofdm_frame_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(ofdm_frame_generator_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(ofdm_frame_generator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(ofdm_frame_generator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(ofdm_frame_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(ofdm_frame_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(ofdm_frame_generator_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(ofdm_frame_generator_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(ofdm_frame_generator_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(ofdm_frame_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(ofdm_frame_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(ofdm_frame_generator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(ofdm_frame_generator_sptr self)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(ofdm_frame_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(ofdm_frame_generator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(ofdm_frame_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(ofdm_frame_generator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(ofdm_frame_generator_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_frame_generator_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(ofdm_frame_generator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(ofdm_frame_generator_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_frame_generator_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(ofdm_frame_generator_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(ofdm_frame_generator_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(ofdm_frame_generator_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(ofdm_frame_generator_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(ofdm_frame_generator_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(ofdm_frame_generator_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_frame_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(ofdm_frame_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(ofdm_frame_generator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(ofdm_frame_generator_sptr self)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(ofdm_frame_generator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(ofdm_frame_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(ofdm_frame_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(ofdm_frame_generator_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(ofdm_frame_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(ofdm_frame_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(ofdm_frame_generator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(ofdm_frame_generator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(ofdm_frame_generator_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(ofdm_frame_generator_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(ofdm_frame_generator_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(ofdm_frame_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(ofdm_frame_generator_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(ofdm_frame_generator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(ofdm_frame_generator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(ofdm_frame_generator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(ofdm_frame_generator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_message_subscribers(self, which_port)

# Register ofdm_frame_generator_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ofdm_frame_generator_sptr_swigregister(ofdm_frame_generator_sptr)


ofdm_frame_generator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_frame_generator = ofdm_frame_generator.make;

class range_angle_estimator(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::range_angle_estimator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::range_angle_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::range_angle_estimator::make is the public interface for creating new instances.

    Args:
        vlen : 
        range_bins : 
        angle_bins : 
        noise_discard_range_m : 
        noise_discard_angle_deg : 
        snr_threshold : 
        power_threshold : 
        stats_path : 
        stats_signal_strength_path : 
        stats_record : 
        len_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::range_angle_estimator::sptr":
        r"""
        make(int vlen, pmt_vector_float range_bins, pmt_vector_float angle_bins, float noise_discard_range_m, float noise_discard_angle_deg, float snr_threshold, float power_threshold, std::string const & stats_path, std::string const & stats_signal_strength_path, bool stats_record, std::string const & len_key="packet_len", bool debug=False) -> range_angle_estimator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::range_angle_estimator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::range_angle_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::range_angle_estimator::make is the public interface for creating new instances.

        Args:
            vlen : 
            range_bins : 
            angle_bins : 
            noise_discard_range_m : 
            noise_discard_angle_deg : 
            snr_threshold : 
            power_threshold : 
            stats_path : 
            stats_signal_strength_path : 
            stats_record : 
            len_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_make(*args, **kwargs)

    def set_snr_threshold(self, snr_threshold: "float") -> "void":
        r"""set_snr_threshold(range_angle_estimator self, float snr_threshold)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_set_snr_threshold(self, snr_threshold)

    def set_power_threshold(self, power_threshold: "float") -> "void":
        r"""set_power_threshold(range_angle_estimator self, float power_threshold)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_set_power_threshold(self, power_threshold)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(range_angle_estimator self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_set_stats_record(self, stats_record)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_range_angle_estimator

# Register range_angle_estimator in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.range_angle_estimator_swigregister(range_angle_estimator)

def range_angle_estimator_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::range_angle_estimator::sptr":
    r"""
    range_angle_estimator_make(int vlen, pmt_vector_float range_bins, pmt_vector_float angle_bins, float noise_discard_range_m, float noise_discard_angle_deg, float snr_threshold, float power_threshold, std::string const & stats_path, std::string const & stats_signal_strength_path, bool stats_record, std::string const & len_key="packet_len", bool debug=False) -> range_angle_estimator_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::range_angle_estimator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::range_angle_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::range_angle_estimator::make is the public interface for creating new instances.

    Args:
        vlen : 
        range_bins : 
        angle_bins : 
        noise_discard_range_m : 
        noise_discard_angle_deg : 
        snr_threshold : 
        power_threshold : 
        stats_path : 
        stats_signal_strength_path : 
        stats_record : 
        len_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.range_angle_estimator_make(*args, **kwargs)

class range_angle_estimator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::range_angle_estimator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(range_angle_estimator_sptr self) -> range_angle_estimator_sptr
        __init__(range_angle_estimator_sptr self, range_angle_estimator p) -> range_angle_estimator_sptr
        """
        _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_range_angle_estimator_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::range_angle_estimator *":
        r"""__deref__(range_angle_estimator_sptr self) -> range_angle_estimator"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_range_angle_estimator_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::range_angle_estimator::sptr":
        r"""
        make(range_angle_estimator_sptr self, int vlen, pmt_vector_float range_bins, pmt_vector_float angle_bins, float noise_discard_range_m, float noise_discard_angle_deg, float snr_threshold, float power_threshold, std::string const & stats_path, std::string const & stats_signal_strength_path, bool stats_record, std::string const & len_key="packet_len", bool debug=False) -> range_angle_estimator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::range_angle_estimator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::range_angle_estimator's constructor is in a private implementation class. mimo_ofdm_jrc::range_angle_estimator::make is the public interface for creating new instances.

        Args:
            vlen : 
            range_bins : 
            angle_bins : 
            noise_discard_range_m : 
            noise_discard_angle_deg : 
            snr_threshold : 
            power_threshold : 
            stats_path : 
            stats_signal_strength_path : 
            stats_record : 
            len_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_make(self, *args, **kwargs)

    def set_snr_threshold(self, snr_threshold: "float") -> "void":
        r"""set_snr_threshold(range_angle_estimator_sptr self, float snr_threshold)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_snr_threshold(self, snr_threshold)

    def set_power_threshold(self, power_threshold: "float") -> "void":
        r"""set_power_threshold(range_angle_estimator_sptr self, float power_threshold)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_power_threshold(self, power_threshold)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(range_angle_estimator_sptr self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_stats_record(self, stats_record)

    def history(self) -> "unsigned int":
        r"""history(range_angle_estimator_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(range_angle_estimator_sptr self, int which, int delay)
        declare_sample_delay(range_angle_estimator_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(range_angle_estimator_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(range_angle_estimator_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(range_angle_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(range_angle_estimator_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(range_angle_estimator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(range_angle_estimator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(range_angle_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(range_angle_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(range_angle_estimator_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(range_angle_estimator_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(range_angle_estimator_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(range_angle_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(range_angle_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(range_angle_estimator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(range_angle_estimator_sptr self)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(range_angle_estimator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(range_angle_estimator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(range_angle_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(range_angle_estimator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(range_angle_estimator_sptr self, long max_output_buffer)
        set_max_output_buffer(range_angle_estimator_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(range_angle_estimator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(range_angle_estimator_sptr self, long min_output_buffer)
        set_min_output_buffer(range_angle_estimator_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(range_angle_estimator_sptr self, int which) -> float
        pc_input_buffers_full(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(range_angle_estimator_sptr self, int which) -> float
        pc_input_buffers_full_avg(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(range_angle_estimator_sptr self, int which) -> float
        pc_input_buffers_full_var(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(range_angle_estimator_sptr self, int which) -> float
        pc_output_buffers_full(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(range_angle_estimator_sptr self, int which) -> float
        pc_output_buffers_full_avg(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(range_angle_estimator_sptr self, int which) -> float
        pc_output_buffers_full_var(range_angle_estimator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(range_angle_estimator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(range_angle_estimator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(range_angle_estimator_sptr self)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(range_angle_estimator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(range_angle_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(range_angle_estimator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(range_angle_estimator_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(range_angle_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(range_angle_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(range_angle_estimator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(range_angle_estimator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(range_angle_estimator_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(range_angle_estimator_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(range_angle_estimator_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(range_angle_estimator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(range_angle_estimator_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(range_angle_estimator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(range_angle_estimator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(range_angle_estimator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(range_angle_estimator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.range_angle_estimator_sptr_message_subscribers(self, which_port)

# Register range_angle_estimator_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.range_angle_estimator_sptr_swigregister(range_angle_estimator_sptr)


range_angle_estimator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
range_angle_estimator = range_angle_estimator.make;

class stream_decoder(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_decoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_decoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_decoder::make is the public interface for creating new instances.

    Args:
        n_data_carriers : 
        comm_log_file : 
        stats_record : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(n_data_carriers: "int", comm_log_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_decoder::sptr":
        r"""
        make(int n_data_carriers, std::string const & comm_log_file, bool stats_record, bool debug) -> stream_decoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_decoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_decoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_decoder::make is the public interface for creating new instances.

        Args:
            n_data_carriers : 
            comm_log_file : 
            stats_record : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_make(n_data_carriers, comm_log_file, stats_record, debug)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(stream_decoder self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_set_stats_record(self, stats_record)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_stream_decoder

# Register stream_decoder in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.stream_decoder_swigregister(stream_decoder)

def stream_decoder_make(n_data_carriers: "int", comm_log_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_decoder::sptr":
    r"""
    stream_decoder_make(int n_data_carriers, std::string const & comm_log_file, bool stats_record, bool debug) -> stream_decoder_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_decoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_decoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_decoder::make is the public interface for creating new instances.

    Args:
        n_data_carriers : 
        comm_log_file : 
        stats_record : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.stream_decoder_make(n_data_carriers, comm_log_file, stats_record, debug)

class stream_decoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::stream_decoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(stream_decoder_sptr self) -> stream_decoder_sptr
        __init__(stream_decoder_sptr self, stream_decoder p) -> stream_decoder_sptr
        """
        _mimo_ofdm_jrc_swig.stream_decoder_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_stream_decoder_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::stream_decoder *":
        r"""__deref__(stream_decoder_sptr self) -> stream_decoder"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_stream_decoder_sptr

    def make(self, n_data_carriers: "int", comm_log_file: "std::string const &", stats_record: "bool", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_decoder::sptr":
        r"""
        make(stream_decoder_sptr self, int n_data_carriers, std::string const & comm_log_file, bool stats_record, bool debug) -> stream_decoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_decoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_decoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_decoder::make is the public interface for creating new instances.

        Args:
            n_data_carriers : 
            comm_log_file : 
            stats_record : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_make(self, n_data_carriers, comm_log_file, stats_record, debug)

    def set_stats_record(self, stats_record: "bool") -> "void":
        r"""set_stats_record(stream_decoder_sptr self, bool stats_record)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_stats_record(self, stats_record)

    def history(self) -> "unsigned int":
        r"""history(stream_decoder_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(stream_decoder_sptr self, int which, int delay)
        declare_sample_delay(stream_decoder_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(stream_decoder_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(stream_decoder_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(stream_decoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(stream_decoder_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(stream_decoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(stream_decoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(stream_decoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(stream_decoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(stream_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(stream_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(stream_decoder_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(stream_decoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(stream_decoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(stream_decoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(stream_decoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(stream_decoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(stream_decoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(stream_decoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(stream_decoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(stream_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(stream_decoder_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(stream_decoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(stream_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(stream_decoder_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(stream_decoder_sptr self, int which) -> float
        pc_input_buffers_full(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(stream_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(stream_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(stream_decoder_sptr self, int which) -> float
        pc_output_buffers_full(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(stream_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(stream_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(stream_decoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(stream_decoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(stream_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(stream_decoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(stream_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(stream_decoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(stream_decoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(stream_decoder_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(stream_decoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(stream_decoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(stream_decoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(stream_decoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(stream_decoder_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(stream_decoder_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(stream_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(stream_decoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(stream_decoder_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(stream_decoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(stream_decoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(stream_decoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(stream_decoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_decoder_sptr_message_subscribers(self, which_port)

# Register stream_decoder_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.stream_decoder_sptr_swigregister(stream_decoder_sptr)


stream_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stream_decoder = stream_decoder.make;

BPSK_1_2 = _mimo_ofdm_jrc_swig.BPSK_1_2

BPSK_3_4 = _mimo_ofdm_jrc_swig.BPSK_3_4

QPSK_1_2 = _mimo_ofdm_jrc_swig.QPSK_1_2

QPSK_3_4 = _mimo_ofdm_jrc_swig.QPSK_3_4

QAM16_1_2 = _mimo_ofdm_jrc_swig.QAM16_1_2

QAM16_3_4 = _mimo_ofdm_jrc_swig.QAM16_3_4

NDP = _mimo_ofdm_jrc_swig.NDP

DATA = _mimo_ofdm_jrc_swig.DATA

class stream_encoder(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_encoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_encoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_encoder::make is the public interface for creating new instances.

    Args:
        mod_encode : 
        data_len : 
        N_ss_radar : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(mod_encode: "MCS", data_len: "int", N_ss_radar: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_encoder::sptr":
        r"""
        make(MCS mod_encode, int data_len, int N_ss_radar, bool debug) -> stream_encoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_encoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_encoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_encoder::make is the public interface for creating new instances.

        Args:
            mod_encode : 
            data_len : 
            N_ss_radar : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_make(mod_encode, data_len, N_ss_radar, debug)

    def set_mcs(self, mod_encode: "MCS") -> "void":
        r"""set_mcs(stream_encoder self, MCS mod_encode)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_set_mcs(self, mod_encode)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_stream_encoder

# Register stream_encoder in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.stream_encoder_swigregister(stream_encoder)

def stream_encoder_make(mod_encode: "MCS", data_len: "int", N_ss_radar: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_encoder::sptr":
    r"""
    stream_encoder_make(MCS mod_encode, int data_len, int N_ss_radar, bool debug) -> stream_encoder_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_encoder.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_encoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_encoder::make is the public interface for creating new instances.

    Args:
        mod_encode : 
        data_len : 
        N_ss_radar : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.stream_encoder_make(mod_encode, data_len, N_ss_radar, debug)

class stream_encoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::stream_encoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(stream_encoder_sptr self) -> stream_encoder_sptr
        __init__(stream_encoder_sptr self, stream_encoder p) -> stream_encoder_sptr
        """
        _mimo_ofdm_jrc_swig.stream_encoder_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_stream_encoder_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::stream_encoder *":
        r"""__deref__(stream_encoder_sptr self) -> stream_encoder"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_stream_encoder_sptr

    def make(self, mod_encode: "MCS", data_len: "int", N_ss_radar: "int", debug: "bool") -> "gr::mimo_ofdm_jrc::stream_encoder::sptr":
        r"""
        make(stream_encoder_sptr self, MCS mod_encode, int data_len, int N_ss_radar, bool debug) -> stream_encoder_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::stream_encoder.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::stream_encoder's constructor is in a private implementation class. mimo_ofdm_jrc::stream_encoder::make is the public interface for creating new instances.

        Args:
            mod_encode : 
            data_len : 
            N_ss_radar : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_make(self, mod_encode, data_len, N_ss_radar, debug)

    def set_mcs(self, mod_encode: "MCS") -> "void":
        r"""set_mcs(stream_encoder_sptr self, MCS mod_encode)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_mcs(self, mod_encode)

    def history(self) -> "unsigned int":
        r"""history(stream_encoder_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(stream_encoder_sptr self, int which, int delay)
        declare_sample_delay(stream_encoder_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(stream_encoder_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(stream_encoder_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(stream_encoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(stream_encoder_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(stream_encoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(stream_encoder_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(stream_encoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(stream_encoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(stream_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(stream_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(stream_encoder_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(stream_encoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(stream_encoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(stream_encoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(stream_encoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(stream_encoder_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(stream_encoder_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(stream_encoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(stream_encoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(stream_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(stream_encoder_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(stream_encoder_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(stream_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(stream_encoder_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(stream_encoder_sptr self, int which) -> float
        pc_input_buffers_full(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(stream_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(stream_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(stream_encoder_sptr self, int which) -> float
        pc_output_buffers_full(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(stream_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(stream_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(stream_encoder_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(stream_encoder_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(stream_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(stream_encoder_sptr self)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(stream_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(stream_encoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(stream_encoder_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(stream_encoder_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(stream_encoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(stream_encoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(stream_encoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(stream_encoder_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(stream_encoder_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(stream_encoder_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(stream_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(stream_encoder_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(stream_encoder_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(stream_encoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(stream_encoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(stream_encoder_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(stream_encoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.stream_encoder_sptr_message_subscribers(self, which_port)

# Register stream_encoder_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.stream_encoder_sptr_swigregister(stream_encoder_sptr)


stream_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stream_encoder = stream_encoder.make;

class sync_mimo_trx(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::sync_mimo_trx.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::sync_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::sync_mimo_trx::make is the public interface for creating new instances.

    Args:
        N_mboard : 
        N_tx : 
        N_rx : 
        samp_rate : 
        center_freq : 
        num_delay_samps : 
        debug : 
        update_period : 
        args_tx : 
        wire_tx : 
        clock_source_tx : 
        time_source_tx : 
        antenna_tx : 
        gain_tx : 
        timeout_tx : 
        wait_tx : 
        lo_offset_tx : 
        args_rx : 
        wire_rx : 
        clock_source_rx : 
        time_source_rx : 
        antenna_rx : 
        gain_rx : 
        timeout_rx : 
        wait_rx : 
        lo_offset_rx : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::sync_mimo_trx::sptr":
        r"""
        make(int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args_tx, std::string wire_tx, std::string clock_source_tx, std::string time_source_tx, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, float lo_offset_tx, std::string args_rx, std::string wire_rx, std::string clock_source_rx, std::string time_source_rx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string const & len_key="packet_len") -> sync_mimo_trx_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::sync_mimo_trx.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::sync_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::sync_mimo_trx::make is the public interface for creating new instances.

        Args:
            N_mboard : 
            N_tx : 
            N_rx : 
            samp_rate : 
            center_freq : 
            num_delay_samps : 
            debug : 
            update_period : 
            args_tx : 
            wire_tx : 
            clock_source_tx : 
            time_source_tx : 
            antenna_tx : 
            gain_tx : 
            timeout_tx : 
            wait_tx : 
            lo_offset_tx : 
            args_rx : 
            wire_rx : 
            clock_source_rx : 
            time_source_rx : 
            antenna_rx : 
            gain_rx : 
            timeout_rx : 
            wait_rx : 
            lo_offset_rx : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_make(*args, **kwargs)

    def set_num_delay_samps(self, num_samps: "int") -> "void":
        r"""set_num_delay_samps(sync_mimo_trx self, int num_samps)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_set_num_delay_samps(self, num_samps)

    def set_rx_gain(self, gain: "float") -> "void":
        r"""set_rx_gain(sync_mimo_trx self, float gain)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_set_rx_gain(self, gain)

    def set_tx_gain(self, gain: "float") -> "void":
        r"""set_tx_gain(sync_mimo_trx self, float gain)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_set_tx_gain(self, gain)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_sync_mimo_trx

# Register sync_mimo_trx in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.sync_mimo_trx_swigregister(sync_mimo_trx)

def sync_mimo_trx_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::sync_mimo_trx::sptr":
    r"""
    sync_mimo_trx_make(int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args_tx, std::string wire_tx, std::string clock_source_tx, std::string time_source_tx, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, float lo_offset_tx, std::string args_rx, std::string wire_rx, std::string clock_source_rx, std::string time_source_rx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string const & len_key="packet_len") -> sync_mimo_trx_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::sync_mimo_trx.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::sync_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::sync_mimo_trx::make is the public interface for creating new instances.

    Args:
        N_mboard : 
        N_tx : 
        N_rx : 
        samp_rate : 
        center_freq : 
        num_delay_samps : 
        debug : 
        update_period : 
        args_tx : 
        wire_tx : 
        clock_source_tx : 
        time_source_tx : 
        antenna_tx : 
        gain_tx : 
        timeout_tx : 
        wait_tx : 
        lo_offset_tx : 
        args_rx : 
        wire_rx : 
        clock_source_rx : 
        time_source_rx : 
        antenna_rx : 
        gain_rx : 
        timeout_rx : 
        wait_rx : 
        lo_offset_rx : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.sync_mimo_trx_make(*args, **kwargs)

class sync_mimo_trx_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::sync_mimo_trx > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sync_mimo_trx_sptr self) -> sync_mimo_trx_sptr
        __init__(sync_mimo_trx_sptr self, sync_mimo_trx p) -> sync_mimo_trx_sptr
        """
        _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_sync_mimo_trx_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::sync_mimo_trx *":
        r"""__deref__(sync_mimo_trx_sptr self) -> sync_mimo_trx"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_sync_mimo_trx_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::sync_mimo_trx::sptr":
        r"""
        make(sync_mimo_trx_sptr self, int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args_tx, std::string wire_tx, std::string clock_source_tx, std::string time_source_tx, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, float lo_offset_tx, std::string args_rx, std::string wire_rx, std::string clock_source_rx, std::string time_source_rx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string const & len_key="packet_len") -> sync_mimo_trx_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::sync_mimo_trx.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::sync_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::sync_mimo_trx::make is the public interface for creating new instances.

        Args:
            N_mboard : 
            N_tx : 
            N_rx : 
            samp_rate : 
            center_freq : 
            num_delay_samps : 
            debug : 
            update_period : 
            args_tx : 
            wire_tx : 
            clock_source_tx : 
            time_source_tx : 
            antenna_tx : 
            gain_tx : 
            timeout_tx : 
            wait_tx : 
            lo_offset_tx : 
            args_rx : 
            wire_rx : 
            clock_source_rx : 
            time_source_rx : 
            antenna_rx : 
            gain_rx : 
            timeout_rx : 
            wait_rx : 
            lo_offset_rx : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_make(self, *args, **kwargs)

    def set_num_delay_samps(self, num_samps: "int") -> "void":
        r"""set_num_delay_samps(sync_mimo_trx_sptr self, int num_samps)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_num_delay_samps(self, num_samps)

    def set_rx_gain(self, gain: "float") -> "void":
        r"""set_rx_gain(sync_mimo_trx_sptr self, float gain)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_rx_gain(self, gain)

    def set_tx_gain(self, gain: "float") -> "void":
        r"""set_tx_gain(sync_mimo_trx_sptr self, float gain)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_tx_gain(self, gain)

    def history(self) -> "unsigned int":
        r"""history(sync_mimo_trx_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(sync_mimo_trx_sptr self, int which, int delay)
        declare_sample_delay(sync_mimo_trx_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(sync_mimo_trx_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(sync_mimo_trx_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(sync_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(sync_mimo_trx_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(sync_mimo_trx_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(sync_mimo_trx_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(sync_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(sync_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(sync_mimo_trx_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(sync_mimo_trx_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(sync_mimo_trx_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(sync_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(sync_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(sync_mimo_trx_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(sync_mimo_trx_sptr self)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(sync_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(sync_mimo_trx_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(sync_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(sync_mimo_trx_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(sync_mimo_trx_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_mimo_trx_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(sync_mimo_trx_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(sync_mimo_trx_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_mimo_trx_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(sync_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(sync_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(sync_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(sync_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(sync_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(sync_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(sync_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(sync_mimo_trx_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(sync_mimo_trx_sptr self)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(sync_mimo_trx_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(sync_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(sync_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(sync_mimo_trx_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(sync_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(sync_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(sync_mimo_trx_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(sync_mimo_trx_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(sync_mimo_trx_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(sync_mimo_trx_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(sync_mimo_trx_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(sync_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(sync_mimo_trx_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(sync_mimo_trx_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(sync_mimo_trx_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(sync_mimo_trx_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(sync_mimo_trx_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_message_subscribers(self, which_port)

# Register sync_mimo_trx_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.sync_mimo_trx_sptr_swigregister(sync_mimo_trx_sptr)


sync_mimo_trx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync_mimo_trx = sync_mimo_trx.make;

class target_simulator(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::target_simulator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::target_simulator's constructor is in a private implementation class. mimo_ofdm_jrc::target_simulator::make is the public interface for creating new instances.

    Args:
        range : 
        velocity : 
        rcs : 
        azimuth : 
        position_rx : 
        samp_rate : 
        center_freq : 
        self_coupling_db : 
        rndm_phaseshift : 
        self_coupling : 
        len_key : 
        debug : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::target_simulator::sptr":
        r"""
        make(pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, pmt_vector_float position_rx, int samp_rate, float center_freq, float self_coupling_db, bool rndm_phaseshift=False, bool self_coupling=False, std::string const & len_key="packet_len", bool debug=False) -> target_simulator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::target_simulator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::target_simulator's constructor is in a private implementation class. mimo_ofdm_jrc::target_simulator::make is the public interface for creating new instances.

        Args:
            range : 
            velocity : 
            rcs : 
            azimuth : 
            position_rx : 
            samp_rate : 
            center_freq : 
            self_coupling_db : 
            rndm_phaseshift : 
            self_coupling : 
            len_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.target_simulator_make(*args, **kwargs)

    def setup_targets(self, range: "pmt_vector_float", velocity: "pmt_vector_float", rcs: "pmt_vector_float", azimuth: "pmt_vector_float", position_rx: "pmt_vector_float", samp_rate: "int", center_freq: "float", self_coupling_db: "float", rndm_phaseshift: "bool", self_coupling: "bool") -> "void":
        r"""setup_targets(target_simulator self, pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, pmt_vector_float position_rx, int samp_rate, float center_freq, float self_coupling_db, bool rndm_phaseshift, bool self_coupling)"""
        return _mimo_ofdm_jrc_swig.target_simulator_setup_targets(self, range, velocity, rcs, azimuth, position_rx, samp_rate, center_freq, self_coupling_db, rndm_phaseshift, self_coupling)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_target_simulator

# Register target_simulator in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.target_simulator_swigregister(target_simulator)

def target_simulator_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::target_simulator::sptr":
    r"""
    target_simulator_make(pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, pmt_vector_float position_rx, int samp_rate, float center_freq, float self_coupling_db, bool rndm_phaseshift=False, bool self_coupling=False, std::string const & len_key="packet_len", bool debug=False) -> target_simulator_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::target_simulator.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::target_simulator's constructor is in a private implementation class. mimo_ofdm_jrc::target_simulator::make is the public interface for creating new instances.

    Args:
        range : 
        velocity : 
        rcs : 
        azimuth : 
        position_rx : 
        samp_rate : 
        center_freq : 
        self_coupling_db : 
        rndm_phaseshift : 
        self_coupling : 
        len_key : 
        debug : 
    """
    return _mimo_ofdm_jrc_swig.target_simulator_make(*args, **kwargs)

class target_simulator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::target_simulator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(target_simulator_sptr self) -> target_simulator_sptr
        __init__(target_simulator_sptr self, target_simulator p) -> target_simulator_sptr
        """
        _mimo_ofdm_jrc_swig.target_simulator_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_target_simulator_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::target_simulator *":
        r"""__deref__(target_simulator_sptr self) -> target_simulator"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_target_simulator_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::target_simulator::sptr":
        r"""
        make(target_simulator_sptr self, pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, pmt_vector_float position_rx, int samp_rate, float center_freq, float self_coupling_db, bool rndm_phaseshift=False, bool self_coupling=False, std::string const & len_key="packet_len", bool debug=False) -> target_simulator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::target_simulator.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::target_simulator's constructor is in a private implementation class. mimo_ofdm_jrc::target_simulator::make is the public interface for creating new instances.

        Args:
            range : 
            velocity : 
            rcs : 
            azimuth : 
            position_rx : 
            samp_rate : 
            center_freq : 
            self_coupling_db : 
            rndm_phaseshift : 
            self_coupling : 
            len_key : 
            debug : 
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_make(self, *args, **kwargs)

    def setup_targets(self, range: "pmt_vector_float", velocity: "pmt_vector_float", rcs: "pmt_vector_float", azimuth: "pmt_vector_float", position_rx: "pmt_vector_float", samp_rate: "int", center_freq: "float", self_coupling_db: "float", rndm_phaseshift: "bool", self_coupling: "bool") -> "void":
        r"""setup_targets(target_simulator_sptr self, pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, pmt_vector_float position_rx, int samp_rate, float center_freq, float self_coupling_db, bool rndm_phaseshift, bool self_coupling)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_setup_targets(self, range, velocity, rcs, azimuth, position_rx, samp_rate, center_freq, self_coupling_db, rndm_phaseshift, self_coupling)

    def history(self) -> "unsigned int":
        r"""history(target_simulator_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(target_simulator_sptr self, int which, int delay)
        declare_sample_delay(target_simulator_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(target_simulator_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(target_simulator_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(target_simulator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(target_simulator_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(target_simulator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(target_simulator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(target_simulator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(target_simulator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(target_simulator_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(target_simulator_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(target_simulator_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(target_simulator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(target_simulator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(target_simulator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(target_simulator_sptr self)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(target_simulator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(target_simulator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(target_simulator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(target_simulator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(target_simulator_sptr self, long max_output_buffer)
        set_max_output_buffer(target_simulator_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(target_simulator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(target_simulator_sptr self, long min_output_buffer)
        set_min_output_buffer(target_simulator_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(target_simulator_sptr self, int which) -> float
        pc_input_buffers_full(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(target_simulator_sptr self, int which) -> float
        pc_input_buffers_full_avg(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(target_simulator_sptr self, int which) -> float
        pc_input_buffers_full_var(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(target_simulator_sptr self, int which) -> float
        pc_output_buffers_full(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(target_simulator_sptr self, int which) -> float
        pc_output_buffers_full_avg(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(target_simulator_sptr self, int which) -> float
        pc_output_buffers_full_var(target_simulator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(target_simulator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(target_simulator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(target_simulator_sptr self)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(target_simulator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(target_simulator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(target_simulator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(target_simulator_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(target_simulator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(target_simulator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(target_simulator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(target_simulator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(target_simulator_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(target_simulator_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(target_simulator_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(target_simulator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(target_simulator_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(target_simulator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(target_simulator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(target_simulator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(target_simulator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.target_simulator_sptr_message_subscribers(self, which_port)

# Register target_simulator_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.target_simulator_sptr_swigregister(target_simulator_sptr)


target_simulator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
target_simulator = target_simulator.make;

class usrp_mimo_trx(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::usrp_mimo_trx.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::usrp_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::usrp_mimo_trx::make is the public interface for creating new instances.

    Args:
        N_mboard : 
        N_tx : 
        N_rx : 
        samp_rate : 
        center_freq : 
        num_delay_samps : 
        debug : 
        update_period : 
        args : 
        clock_sources : 
        time_sources : 
        antenna_tx : 
        gain_tx : 
        timeout_tx : 
        wait_tx : 
        wire_tx : 
        antenna_rx : 
        gain_rx : 
        timeout_rx : 
        wait_rx : 
        lo_offset_rx : 
        wire_rx : 
        len_key : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::usrp_mimo_trx::sptr":
        r"""
        make(int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args, std::string clock_sources, std::string time_sources, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, std::string wire_tx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string wire_rx, std::string const & len_key="packet_len") -> usrp_mimo_trx_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::usrp_mimo_trx.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::usrp_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::usrp_mimo_trx::make is the public interface for creating new instances.

        Args:
            N_mboard : 
            N_tx : 
            N_rx : 
            samp_rate : 
            center_freq : 
            num_delay_samps : 
            debug : 
            update_period : 
            args : 
            clock_sources : 
            time_sources : 
            antenna_tx : 
            gain_tx : 
            timeout_tx : 
            wait_tx : 
            wire_tx : 
            antenna_rx : 
            gain_rx : 
            timeout_rx : 
            wait_rx : 
            lo_offset_rx : 
            wire_rx : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_make(*args, **kwargs)

    def set_num_delay_samps(self, num_samps: "int") -> "void":
        r"""set_num_delay_samps(usrp_mimo_trx self, int num_samps)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_set_num_delay_samps(self, num_samps)

    def set_rx_gain(self, gain: "float") -> "void":
        r"""set_rx_gain(usrp_mimo_trx self, float gain)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_set_rx_gain(self, gain)

    def set_tx_gain(self, gain: "float") -> "void":
        r"""set_tx_gain(usrp_mimo_trx self, float gain)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_set_tx_gain(self, gain)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_usrp_mimo_trx

# Register usrp_mimo_trx in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.usrp_mimo_trx_swigregister(usrp_mimo_trx)

def usrp_mimo_trx_make(*args, **kwargs) -> "gr::mimo_ofdm_jrc::usrp_mimo_trx::sptr":
    r"""
    usrp_mimo_trx_make(int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args, std::string clock_sources, std::string time_sources, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, std::string wire_tx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string wire_rx, std::string const & len_key="packet_len") -> usrp_mimo_trx_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::usrp_mimo_trx.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::usrp_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::usrp_mimo_trx::make is the public interface for creating new instances.

    Args:
        N_mboard : 
        N_tx : 
        N_rx : 
        samp_rate : 
        center_freq : 
        num_delay_samps : 
        debug : 
        update_period : 
        args : 
        clock_sources : 
        time_sources : 
        antenna_tx : 
        gain_tx : 
        timeout_tx : 
        wait_tx : 
        wire_tx : 
        antenna_rx : 
        gain_rx : 
        timeout_rx : 
        wait_rx : 
        lo_offset_rx : 
        wire_rx : 
        len_key : 
    """
    return _mimo_ofdm_jrc_swig.usrp_mimo_trx_make(*args, **kwargs)

class usrp_mimo_trx_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::usrp_mimo_trx > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(usrp_mimo_trx_sptr self) -> usrp_mimo_trx_sptr
        __init__(usrp_mimo_trx_sptr self, usrp_mimo_trx p) -> usrp_mimo_trx_sptr
        """
        _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_usrp_mimo_trx_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::usrp_mimo_trx *":
        r"""__deref__(usrp_mimo_trx_sptr self) -> usrp_mimo_trx"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_usrp_mimo_trx_sptr

    def make(self, *args, **kwargs) -> "gr::mimo_ofdm_jrc::usrp_mimo_trx::sptr":
        r"""
        make(usrp_mimo_trx_sptr self, int N_mboard, int N_tx, int N_rx, int samp_rate, float center_freq, int num_delay_samps, bool debug, float update_period, std::string args, std::string clock_sources, std::string time_sources, std::string antenna_tx, float gain_tx, float timeout_tx, float wait_tx, std::string wire_tx, std::string antenna_rx, float gain_rx, float timeout_rx, float wait_rx, float lo_offset_rx, std::string wire_rx, std::string const & len_key="packet_len") -> usrp_mimo_trx_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::usrp_mimo_trx.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::usrp_mimo_trx's constructor is in a private implementation class. mimo_ofdm_jrc::usrp_mimo_trx::make is the public interface for creating new instances.

        Args:
            N_mboard : 
            N_tx : 
            N_rx : 
            samp_rate : 
            center_freq : 
            num_delay_samps : 
            debug : 
            update_period : 
            args : 
            clock_sources : 
            time_sources : 
            antenna_tx : 
            gain_tx : 
            timeout_tx : 
            wait_tx : 
            wire_tx : 
            antenna_rx : 
            gain_rx : 
            timeout_rx : 
            wait_rx : 
            lo_offset_rx : 
            wire_rx : 
            len_key : 
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_make(self, *args, **kwargs)

    def set_num_delay_samps(self, num_samps: "int") -> "void":
        r"""set_num_delay_samps(usrp_mimo_trx_sptr self, int num_samps)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_num_delay_samps(self, num_samps)

    def set_rx_gain(self, gain: "float") -> "void":
        r"""set_rx_gain(usrp_mimo_trx_sptr self, float gain)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_rx_gain(self, gain)

    def set_tx_gain(self, gain: "float") -> "void":
        r"""set_tx_gain(usrp_mimo_trx_sptr self, float gain)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_tx_gain(self, gain)

    def history(self) -> "unsigned int":
        r"""history(usrp_mimo_trx_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(usrp_mimo_trx_sptr self, int which, int delay)
        declare_sample_delay(usrp_mimo_trx_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(usrp_mimo_trx_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(usrp_mimo_trx_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(usrp_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(usrp_mimo_trx_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(usrp_mimo_trx_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(usrp_mimo_trx_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(usrp_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(usrp_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(usrp_mimo_trx_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(usrp_mimo_trx_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(usrp_mimo_trx_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(usrp_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(usrp_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(usrp_mimo_trx_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(usrp_mimo_trx_sptr self)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(usrp_mimo_trx_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(usrp_mimo_trx_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(usrp_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(usrp_mimo_trx_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(usrp_mimo_trx_sptr self, long max_output_buffer)
        set_max_output_buffer(usrp_mimo_trx_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(usrp_mimo_trx_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(usrp_mimo_trx_sptr self, long min_output_buffer)
        set_min_output_buffer(usrp_mimo_trx_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(usrp_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(usrp_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full_avg(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(usrp_mimo_trx_sptr self, int which) -> float
        pc_input_buffers_full_var(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(usrp_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(usrp_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full_avg(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(usrp_mimo_trx_sptr self, int which) -> float
        pc_output_buffers_full_var(usrp_mimo_trx_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(usrp_mimo_trx_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(usrp_mimo_trx_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(usrp_mimo_trx_sptr self)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(usrp_mimo_trx_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(usrp_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(usrp_mimo_trx_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(usrp_mimo_trx_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(usrp_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(usrp_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(usrp_mimo_trx_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(usrp_mimo_trx_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(usrp_mimo_trx_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(usrp_mimo_trx_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(usrp_mimo_trx_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(usrp_mimo_trx_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(usrp_mimo_trx_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(usrp_mimo_trx_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(usrp_mimo_trx_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(usrp_mimo_trx_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(usrp_mimo_trx_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_message_subscribers(self, which_port)

# Register usrp_mimo_trx_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.usrp_mimo_trx_sptr_swigregister(usrp_mimo_trx_sptr)


usrp_mimo_trx_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
usrp_mimo_trx = usrp_mimo_trx.make;

class zero_pad(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::zero_pad.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::zero_pad's constructor is in a private implementation class. mimo_ofdm_jrc::zero_pad::make is the public interface for creating new instances.

    Args:
        debug : 
        pad_front : 
        pad_tail : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(debug: "bool"=False, pad_front: "unsigned int"=0, pad_tail: "unsigned int"=0) -> "gr::mimo_ofdm_jrc::zero_pad::sptr":
        r"""
        make(bool debug=False, unsigned int pad_front=0, unsigned int pad_tail=0) -> zero_pad_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::zero_pad.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::zero_pad's constructor is in a private implementation class. mimo_ofdm_jrc::zero_pad::make is the public interface for creating new instances.

        Args:
            debug : 
            pad_front : 
            pad_tail : 
        """
        return _mimo_ofdm_jrc_swig.zero_pad_make(debug, pad_front, pad_tail)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_zero_pad

# Register zero_pad in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.zero_pad_swigregister(zero_pad)

def zero_pad_make(debug: "bool"=False, pad_front: "unsigned int"=0, pad_tail: "unsigned int"=0) -> "gr::mimo_ofdm_jrc::zero_pad::sptr":
    r"""
    zero_pad_make(bool debug=False, unsigned int pad_front=0, unsigned int pad_tail=0) -> zero_pad_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of mimo_ofdm_jrc::zero_pad.

    To avoid accidental use of raw pointers, mimo_ofdm_jrc::zero_pad's constructor is in a private implementation class. mimo_ofdm_jrc::zero_pad::make is the public interface for creating new instances.

    Args:
        debug : 
        pad_front : 
        pad_tail : 
    """
    return _mimo_ofdm_jrc_swig.zero_pad_make(debug, pad_front, pad_tail)

class zero_pad_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::zero_pad > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(zero_pad_sptr self) -> zero_pad_sptr
        __init__(zero_pad_sptr self, zero_pad p) -> zero_pad_sptr
        """
        _mimo_ofdm_jrc_swig.zero_pad_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_zero_pad_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::zero_pad *":
        r"""__deref__(zero_pad_sptr self) -> zero_pad"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_zero_pad_sptr

    def make(self, debug: "bool"=False, pad_front: "unsigned int"=0, pad_tail: "unsigned int"=0) -> "gr::mimo_ofdm_jrc::zero_pad::sptr":
        r"""
        make(zero_pad_sptr self, bool debug=False, unsigned int pad_front=0, unsigned int pad_tail=0) -> zero_pad_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of mimo_ofdm_jrc::zero_pad.

        To avoid accidental use of raw pointers, mimo_ofdm_jrc::zero_pad's constructor is in a private implementation class. mimo_ofdm_jrc::zero_pad::make is the public interface for creating new instances.

        Args:
            debug : 
            pad_front : 
            pad_tail : 
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_make(self, debug, pad_front, pad_tail)

    def history(self) -> "unsigned int":
        r"""history(zero_pad_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(zero_pad_sptr self, int which, int delay)
        declare_sample_delay(zero_pad_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(zero_pad_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(zero_pad_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(zero_pad_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(zero_pad_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(zero_pad_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(zero_pad_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(zero_pad_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(zero_pad_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(zero_pad_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(zero_pad_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(zero_pad_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(zero_pad_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(zero_pad_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(zero_pad_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(zero_pad_sptr self)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(zero_pad_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(zero_pad_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(zero_pad_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(zero_pad_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(zero_pad_sptr self, long max_output_buffer)
        set_max_output_buffer(zero_pad_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(zero_pad_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(zero_pad_sptr self, long min_output_buffer)
        set_min_output_buffer(zero_pad_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(zero_pad_sptr self, int which) -> float
        pc_input_buffers_full(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(zero_pad_sptr self, int which) -> float
        pc_input_buffers_full_avg(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(zero_pad_sptr self, int which) -> float
        pc_input_buffers_full_var(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(zero_pad_sptr self, int which) -> float
        pc_output_buffers_full(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(zero_pad_sptr self, int which) -> float
        pc_output_buffers_full_avg(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(zero_pad_sptr self, int which) -> float
        pc_output_buffers_full_var(zero_pad_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(zero_pad_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(zero_pad_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(zero_pad_sptr self)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(zero_pad_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(zero_pad_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(zero_pad_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(zero_pad_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(zero_pad_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(zero_pad_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(zero_pad_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(zero_pad_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(zero_pad_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(zero_pad_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(zero_pad_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(zero_pad_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(zero_pad_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(zero_pad_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(zero_pad_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(zero_pad_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(zero_pad_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.zero_pad_sptr_message_subscribers(self, which_port)

# Register zero_pad_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.zero_pad_sptr_swigregister(zero_pad_sptr)


zero_pad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
zero_pad = zero_pad.make;

class socket_pdu_jrc(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Construct a SOCKET PDU interface.

    Args:
        type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
        addr : network address to use
        port : network port to use
        MTU : maximum transmission unit
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(type: "std::string", addr: "std::string", port: "std::string", MTU: "int") -> "gr::mimo_ofdm_jrc::socket_pdu_jrc::sptr":
        r"""
        make(std::string type, std::string addr, std::string port, int MTU) -> socket_pdu_jrc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Construct a SOCKET PDU interface.

        Args:
            type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
            addr : network address to use
            port : network port to use
            MTU : maximum transmission unit
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_make(type, addr, port, MTU)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_socket_pdu_jrc

# Register socket_pdu_jrc in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.socket_pdu_jrc_swigregister(socket_pdu_jrc)

def socket_pdu_jrc_make(type: "std::string", addr: "std::string", port: "std::string", MTU: "int") -> "gr::mimo_ofdm_jrc::socket_pdu_jrc::sptr":
    r"""
    socket_pdu_jrc_make(std::string type, std::string addr, std::string port, int MTU) -> socket_pdu_jrc_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Construct a SOCKET PDU interface.

    Args:
        type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
        addr : network address to use
        port : network port to use
        MTU : maximum transmission unit
    """
    return _mimo_ofdm_jrc_swig.socket_pdu_jrc_make(type, addr, port, MTU)

class socket_pdu_jrc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::socket_pdu_jrc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(socket_pdu_jrc_sptr self) -> socket_pdu_jrc_sptr
        __init__(socket_pdu_jrc_sptr self, socket_pdu_jrc p) -> socket_pdu_jrc_sptr
        """
        _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_socket_pdu_jrc_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::socket_pdu_jrc *":
        r"""__deref__(socket_pdu_jrc_sptr self) -> socket_pdu_jrc"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_socket_pdu_jrc_sptr

    def make(self, type: "std::string", addr: "std::string", port: "std::string", MTU: "int") -> "gr::mimo_ofdm_jrc::socket_pdu_jrc::sptr":
        r"""
        make(socket_pdu_jrc_sptr self, std::string type, std::string addr, std::string port, int MTU) -> socket_pdu_jrc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Construct a SOCKET PDU interface.

        Args:
            type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
            addr : network address to use
            port : network port to use
            MTU : maximum transmission unit
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_make(self, type, addr, port, MTU)

    def history(self) -> "unsigned int":
        r"""history(socket_pdu_jrc_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(socket_pdu_jrc_sptr self, int which, int delay)
        declare_sample_delay(socket_pdu_jrc_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(socket_pdu_jrc_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(socket_pdu_jrc_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(socket_pdu_jrc_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(socket_pdu_jrc_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(socket_pdu_jrc_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(socket_pdu_jrc_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(socket_pdu_jrc_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(socket_pdu_jrc_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(socket_pdu_jrc_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(socket_pdu_jrc_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(socket_pdu_jrc_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(socket_pdu_jrc_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(socket_pdu_jrc_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(socket_pdu_jrc_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(socket_pdu_jrc_sptr self)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(socket_pdu_jrc_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(socket_pdu_jrc_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(socket_pdu_jrc_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(socket_pdu_jrc_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(socket_pdu_jrc_sptr self, long max_output_buffer)
        set_max_output_buffer(socket_pdu_jrc_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(socket_pdu_jrc_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(socket_pdu_jrc_sptr self, long min_output_buffer)
        set_min_output_buffer(socket_pdu_jrc_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(socket_pdu_jrc_sptr self, int which) -> float
        pc_input_buffers_full(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(socket_pdu_jrc_sptr self, int which) -> float
        pc_input_buffers_full_avg(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(socket_pdu_jrc_sptr self, int which) -> float
        pc_input_buffers_full_var(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(socket_pdu_jrc_sptr self, int which) -> float
        pc_output_buffers_full(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(socket_pdu_jrc_sptr self, int which) -> float
        pc_output_buffers_full_avg(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(socket_pdu_jrc_sptr self, int which) -> float
        pc_output_buffers_full_var(socket_pdu_jrc_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(socket_pdu_jrc_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(socket_pdu_jrc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(socket_pdu_jrc_sptr self)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(socket_pdu_jrc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(socket_pdu_jrc_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(socket_pdu_jrc_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(socket_pdu_jrc_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(socket_pdu_jrc_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(socket_pdu_jrc_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(socket_pdu_jrc_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(socket_pdu_jrc_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(socket_pdu_jrc_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(socket_pdu_jrc_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(socket_pdu_jrc_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(socket_pdu_jrc_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(socket_pdu_jrc_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(socket_pdu_jrc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(socket_pdu_jrc_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(socket_pdu_jrc_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(socket_pdu_jrc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_message_subscribers(self, which_port)

# Register socket_pdu_jrc_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.socket_pdu_jrc_sptr_swigregister(socket_pdu_jrc_sptr)


socket_pdu_jrc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
socket_pdu_jrc = socket_pdu_jrc.make;

class ndp_generator(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fake_socket_pdu::fake_socket_pdu_src.

    To avoid accidental use of raw pointers, fake_socket_pdu::fake_socket_pdu_src's constructor is in a private implementation class. fake_socket_pdu::fake_socket_pdu_src::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::mimo_ofdm_jrc::ndp_generator::sptr":
        r"""
        make() -> ndp_generator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fake_socket_pdu::fake_socket_pdu_src.

        To avoid accidental use of raw pointers, fake_socket_pdu::fake_socket_pdu_src's constructor is in a private implementation class. fake_socket_pdu::fake_socket_pdu_src::make is the public interface for creating new instances.
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_make()
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ndp_generator

# Register ndp_generator in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ndp_generator_swigregister(ndp_generator)

def ndp_generator_make() -> "gr::mimo_ofdm_jrc::ndp_generator::sptr":
    r"""
    ndp_generator_make() -> ndp_generator_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fake_socket_pdu::fake_socket_pdu_src.

    To avoid accidental use of raw pointers, fake_socket_pdu::fake_socket_pdu_src's constructor is in a private implementation class. fake_socket_pdu::fake_socket_pdu_src::make is the public interface for creating new instances.
    """
    return _mimo_ofdm_jrc_swig.ndp_generator_make()

class ndp_generator_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::ndp_generator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ndp_generator_sptr self) -> ndp_generator_sptr
        __init__(ndp_generator_sptr self, ndp_generator p) -> ndp_generator_sptr
        """
        _mimo_ofdm_jrc_swig.ndp_generator_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_ndp_generator_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::ndp_generator *":
        r"""__deref__(ndp_generator_sptr self) -> ndp_generator"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_ndp_generator_sptr

    def make(self) -> "gr::mimo_ofdm_jrc::ndp_generator::sptr":
        r"""
        make(ndp_generator_sptr self) -> ndp_generator_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fake_socket_pdu::fake_socket_pdu_src.

        To avoid accidental use of raw pointers, fake_socket_pdu::fake_socket_pdu_src's constructor is in a private implementation class. fake_socket_pdu::fake_socket_pdu_src::make is the public interface for creating new instances.
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(ndp_generator_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(ndp_generator_sptr self, int which, int delay)
        declare_sample_delay(ndp_generator_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(ndp_generator_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(ndp_generator_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(ndp_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(ndp_generator_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(ndp_generator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(ndp_generator_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(ndp_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(ndp_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(ndp_generator_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(ndp_generator_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(ndp_generator_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(ndp_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(ndp_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(ndp_generator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(ndp_generator_sptr self)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(ndp_generator_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(ndp_generator_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(ndp_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(ndp_generator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(ndp_generator_sptr self, long max_output_buffer)
        set_max_output_buffer(ndp_generator_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(ndp_generator_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(ndp_generator_sptr self, long min_output_buffer)
        set_min_output_buffer(ndp_generator_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(ndp_generator_sptr self, int which) -> float
        pc_input_buffers_full(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(ndp_generator_sptr self, int which) -> float
        pc_input_buffers_full_avg(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(ndp_generator_sptr self, int which) -> float
        pc_input_buffers_full_var(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(ndp_generator_sptr self, int which) -> float
        pc_output_buffers_full(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(ndp_generator_sptr self, int which) -> float
        pc_output_buffers_full_avg(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(ndp_generator_sptr self, int which) -> float
        pc_output_buffers_full_var(ndp_generator_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(ndp_generator_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(ndp_generator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(ndp_generator_sptr self)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(ndp_generator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(ndp_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(ndp_generator_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(ndp_generator_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(ndp_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(ndp_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(ndp_generator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(ndp_generator_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(ndp_generator_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(ndp_generator_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(ndp_generator_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(ndp_generator_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(ndp_generator_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(ndp_generator_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(ndp_generator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(ndp_generator_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(ndp_generator_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.ndp_generator_sptr_message_subscribers(self, which_port)

# Register ndp_generator_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.ndp_generator_sptr_swigregister(ndp_generator_sptr)


ndp_generator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ndp_generator = ndp_generator.make;

class packet_switch(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Construct a Pakcet Switch interface.

    Args:
        period_ms : 
        packet_info_file : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(period_ms: "long", packet_info_file: "std::string const &") -> "gr::mimo_ofdm_jrc::packet_switch::sptr":
        r"""
        make(long period_ms, std::string const & packet_info_file) -> packet_switch_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Construct a Pakcet Switch interface.

        Args:
            period_ms : 
            packet_info_file : 
        """
        return _mimo_ofdm_jrc_swig.packet_switch_make(period_ms, packet_info_file)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_packet_switch

# Register packet_switch in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.packet_switch_swigregister(packet_switch)

def packet_switch_make(period_ms: "long", packet_info_file: "std::string const &") -> "gr::mimo_ofdm_jrc::packet_switch::sptr":
    r"""
    packet_switch_make(long period_ms, std::string const & packet_info_file) -> packet_switch_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Construct a Pakcet Switch interface.

    Args:
        period_ms : 
        packet_info_file : 
    """
    return _mimo_ofdm_jrc_swig.packet_switch_make(period_ms, packet_info_file)

class packet_switch_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::mimo_ofdm_jrc::packet_switch > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(packet_switch_sptr self) -> packet_switch_sptr
        __init__(packet_switch_sptr self, packet_switch p) -> packet_switch_sptr
        """
        _mimo_ofdm_jrc_swig.packet_switch_sptr_swiginit(self, _mimo_ofdm_jrc_swig.new_packet_switch_sptr(*args))

    def __deref__(self) -> "gr::mimo_ofdm_jrc::packet_switch *":
        r"""__deref__(packet_switch_sptr self) -> packet_switch"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr___deref__(self)
    __swig_destroy__ = _mimo_ofdm_jrc_swig.delete_packet_switch_sptr

    def make(self, period_ms: "long", packet_info_file: "std::string const &") -> "gr::mimo_ofdm_jrc::packet_switch::sptr":
        r"""
        make(packet_switch_sptr self, long period_ms, std::string const & packet_info_file) -> packet_switch_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Construct a Pakcet Switch interface.

        Args:
            period_ms : 
            packet_info_file : 
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_make(self, period_ms, packet_info_file)

    def history(self) -> "unsigned int":
        r"""history(packet_switch_sptr self) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(packet_switch_sptr self, int which, int delay)
        declare_sample_delay(packet_switch_sptr self, unsigned int delay)
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(packet_switch_sptr self, int which) -> unsigned int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(packet_switch_sptr self, int multiple)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(packet_switch_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(packet_switch_sptr self) -> double"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(packet_switch_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(packet_switch_sptr self) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(packet_switch_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(packet_switch_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(packet_switch_sptr self, unsigned int which_input) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(packet_switch_sptr self, unsigned int which_output) -> uint64_t"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(packet_switch_sptr self, std::string level)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(packet_switch_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(packet_switch_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(packet_switch_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(packet_switch_sptr self)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(packet_switch_sptr self) -> bool"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(packet_switch_sptr self, int m)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(packet_switch_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(packet_switch_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(packet_switch_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_switch_sptr self, int port, long max_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(packet_switch_sptr self, int i) -> long"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(packet_switch_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_switch_sptr self, int port, long min_output_buffer)
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(packet_switch_sptr self, int which) -> float
        pc_input_buffers_full(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(packet_switch_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(packet_switch_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(packet_switch_sptr self, int which) -> float
        pc_output_buffers_full(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(packet_switch_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(packet_switch_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_switch_sptr self) -> pmt_vector_float
        """
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(packet_switch_sptr self) -> float"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(packet_switch_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(packet_switch_sptr self)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(packet_switch_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(packet_switch_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(packet_switch_sptr self) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(packet_switch_sptr self, int priority) -> int"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(packet_switch_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(packet_switch_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(packet_switch_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(packet_switch_sptr self) -> io_signature_sptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(packet_switch_sptr self) -> long"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(packet_switch_sptr self) -> basic_block_sptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(packet_switch_sptr self, int ninputs, int noutputs) -> bool"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(packet_switch_sptr self) -> std::string"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(packet_switch_sptr self, std::string name)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(packet_switch_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(packet_switch_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(packet_switch_sptr self) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(packet_switch_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _mimo_ofdm_jrc_swig.packet_switch_sptr_message_subscribers(self, which_port)

# Register packet_switch_sptr in _mimo_ofdm_jrc_swig:
_mimo_ofdm_jrc_swig.packet_switch_sptr_swigregister(packet_switch_sptr)


packet_switch_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_switch = packet_switch.make;



